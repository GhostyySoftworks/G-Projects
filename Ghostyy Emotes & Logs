local function CreateInstance(cls, props)
	local inst = Instance.new(cls)
	for i, v in pairs(props) do
		inst[i] = v
	end
	return inst
end

local Colors = {
	Background = Color3.fromRGB(15, 15, 15),
	Border = Color3.fromRGB(25, 25, 25),
	Text = Color3.fromRGB(160, 90, 200),
	TabSelected = Color3.fromRGB(15, 15, 15),
	TabHover = Color3.fromRGB(15, 15, 15),
	SearchBar = Color3.fromRGB(15, 15, 15)
}

local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local AvatarEditorService = game:GetService("AvatarEditorService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")

local existing = CoreGui:FindFirstChild("GhostyyWareGui")
if existing then
	existing:Destroy()
end

local MainGui = CreateInstance("ScreenGui", {
	Name = "GhostyyWareGui",
	ResetOnSpawn = false,
	ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
	Parent = CoreGui
})

local MainFrame = CreateInstance('Frame', {
	Name = 'MainFrame',
	Parent = MainGui,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Size = UDim2.new(0, 312, 0, 400),
	Position = UDim2.new(0, -312, 0, 0),
	ClipsDescendants = true,
	BackgroundTransparency = 1
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = MainFrame end

TweenService:Create(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
	BackgroundTransparency = 0,
	Position = UDim2.new(0, 0, 0, 0)
}):Play()

local MainLabel = CreateInstance('TextLabel', {
	Name = 'MainLabel',
	Parent = MainFrame,
	Text = 'GhostyyWare',
	Font = Enum.Font.SourceSansBold,
	TextSize = 17,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Size = UDim2.new(1, 0, 0, 23),
	TextColor3 = Colors.Text,
	ZIndex = 2
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = MainLabel end

local CloseButton = CreateInstance('TextButton', {
	Name = 'CloseButton',
	Parent = MainLabel,
	Position = UDim2.new(1, -5, 0.5, 0),
	AnchorPoint = Vector2.new(1, 0.5),
	Size = UDim2.new(0, 22, 0, 22),
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Text = '×',
	Font = Enum.Font.SourceSansBold,
	TextSize = 18,
	TextColor3 = Colors.Text
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = CloseButton end

local MinimizeButton = CreateInstance('TextButton', {
	Name = 'MinimizeButton',
	Parent = MainLabel,
	Position = UDim2.new(1, -32, 0.5, 0),
	AnchorPoint = Vector2.new(1, 0.5),
	Size = UDim2.new(0, 22, 0, 22),
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Text = '−',
	Font = Enum.Font.SourceSansBold,
	TextSize = 18,
	TextColor3 = Colors.Text
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = MinimizeButton end

local FreezeButton = CreateInstance('TextButton', {
	Name = 'FreezeButton',
	Parent = MainLabel,
	Text = "F",
	Font = Enum.Font.SourceSans,
	TextSize = 12,
	TextColor3 = Colors.Text,
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Size = UDim2.new(0, 22, 0, 22),
	Position = UDim2.new(1, -59, 0.5, 0),
	AnchorPoint = Vector2.new(1, 0.5),
	Visible = false
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = FreezeButton end

local TabContainer = CreateInstance('Frame', {
	Name = 'TabContainer',
	Parent = MainFrame,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Position = UDim2.new(0, 0, 0, 23),
	Size = UDim2.new(1, 0, 0, 23),
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = TabContainer end

local EmoteTabBtn = CreateInstance('TextButton', {
	Name = 'EmoteTab',
	Parent = TabContainer,
	Text = 'Emotes',
	Font = Enum.Font.SourceSansBold,
	TextSize = 15,
	BackgroundColor3 = Colors.TabSelected,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Position = UDim2.new(0, 0, 0, 0),
	Size = UDim2.new(0.333, 0, 1, 0),
	TextColor3 = Colors.Text
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = EmoteTabBtn end

local CustomEmoteTabBtn = CreateInstance('TextButton', {
	Name = 'CustomEmoteTab',
	Parent = TabContainer,
	Text = 'Custom',
	Font = Enum.Font.SourceSansBold,
	TextSize = 14,
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Position = UDim2.new(0.333, 0, 0, 0),
	Size = UDim2.new(0.333, 0, 1, 0),
	TextColor3 = Colors.Text
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = CustomEmoteTabBtn end

local LogsTabBtn = CreateInstance('TextButton', {
	Name = 'LogsTab',
	Parent = TabContainer,
	Text = 'Logs',
	Font = Enum.Font.SourceSansBold,
	TextSize = 15,
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Position = UDim2.new(0.666, 0, 0, 0),
	Size = UDim2.new(0.334, 0, 1, 0),
	TextColor3 = Colors.Text
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LogsTabBtn end

local EmoteFrame = CreateInstance('Frame', {
	Name = 'EmoteFrame',
	Parent = MainFrame,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Size = UDim2.new(1, 0, 1, -46),
	Position = UDim2.new(0, 0, 0, 46),
	Visible = true,
	BackgroundTransparency = 0
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = EmoteFrame end

local EmoteSearchBar = CreateInstance("TextBox", {
	PlaceholderText = "Search emotes...",
	PlaceholderColor3 = Colors.Text,
	TextColor3 = Colors.Text,
	Text = "",
	TextSize = 14,
	Font = Enum.Font.SourceSans,
	Size = UDim2.new(1, -10, 0, 20),
	Position = UDim2.new(0, 5, 0, 5),
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	TextXAlignment = Enum.TextXAlignment.Center,
	ClearTextOnFocus = true,
	Parent = EmoteFrame
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = EmoteSearchBar end

local EmoteScroll = CreateInstance('ScrollingFrame', {
	Name = 'EmoteScroll',
	Parent = EmoteFrame,
	Position = UDim2.new(0, 0, 0, 30),
	Size = UDim2.new(1, 0, 0.98, -30),
	CanvasSize = UDim2.new(0, 0, 0, 0),
	ScrollBarThickness = 6,
	ScrollBarImageTransparency = 1,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Visible = true,
	AutomaticCanvasSize = Enum.AutomaticSize.Y
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = EmoteScroll end

local CustomScroll = CreateInstance('ScrollingFrame', {
	Name = 'CustomScroll',
	Parent = EmoteFrame,
	Position = UDim2.new(0, 0, 0, 30),
	Size = UDim2.new(1, 0, 0.98, -30),
	CanvasSize = UDim2.new(0, 0, 0, 0),
	ScrollBarThickness = 6,
	ScrollBarImageTransparency = 1,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Visible = false,
	AutomaticCanvasSize = Enum.AutomaticSize.Y
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = CustomScroll end

local EmoteGridLayout = CreateInstance('UIGridLayout', {
	CellSize = UDim2.new(0, 90, 0, 90),
	CellPadding = UDim2.new(0, 5, 0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = EmoteScroll
})

local CustomGridLayout = CreateInstance('UIGridLayout', {
	CellSize = UDim2.new(0, 90, 0, 90),
	CellPadding = UDim2.new(0, 5, 0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = CustomScroll
})

local LoadingFrame = CreateInstance('Frame', {
	Name = "LoadingFrame",
	Size = UDim2.new(1, 0, 1, 0),
	BackgroundTransparency = 0.5,
	BackgroundColor3 = Colors.Background,
	ZIndex = 10,
	Visible = false,
	Parent = EmoteFrame
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LoadingFrame end

local LoadingContainer = CreateInstance('Frame', {
	Size = UDim2.new(0.6, 0, 0.3, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.5, 0),
	BackgroundTransparency = 1,
	Parent = LoadingFrame
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LoadingContainer end

local LoadingSpinner = CreateInstance('ImageLabel', {
	Image = "rbxassetid://9125473266",
	Size = UDim2.new(0.3, 0, 0.5, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.35, 0),
	BackgroundTransparency = 1,
	Parent = LoadingContainer
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LoadingSpinner end

local LoadingText = CreateInstance('TextLabel', {
	Text = "Loading Emotes...",
	TextSize = 16,
	Font = Enum.Font.SourceSansSemibold,
	TextColor3 = Colors.Text,
	Size = UDim2.new(1, 0, 0.3, 0),
	Position = UDim2.new(0, 0, 0.65, 0),
	BackgroundTransparency = 1,
	TextXAlignment = Enum.TextXAlignment.Center,
	Parent = LoadingContainer
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LoadingText end

local LogsFrame = CreateInstance('Frame', {
	Name = 'LogsFrame',
	Parent = MainFrame,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Size = UDim2.new(1, 0, 1, -46),
	Position = UDim2.new(0, 0, 0, 46),
	Visible = false,
	BackgroundTransparency = 0
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LogsFrame end

local LogsSearchFrame = CreateInstance("Frame", {
    Name = "LogsSearchFrame",
    Parent = LogsFrame,
    Size = UDim2.new(1, -10, 0, 25),
    Position = UDim2.new(0, 5, 0, 5),
    BackgroundColor3 = Colors.SearchBar,
    BorderSizePixel = 0
})
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LogsSearchFrame end

local LogsSearchBox = CreateInstance("TextBox", {
    Name = "LogsSearchBox",
    Parent = LogsSearchFrame,
    Size = UDim2.new(1, -10, 1, 0),
    Position = UDim2.new(0, 5, 0, 0),
    BackgroundTransparency = 1,
    Text = "",
    PlaceholderText = "Search logs...",
    TextColor3 = Colors.Text,
    PlaceholderColor3 = Colors.Text,
    Font = Enum.Font.SourceSans,
    TextSize = 14,
    TextXAlignment = Enum.TextXAlignment.Center,
    ClearTextOnFocus = true
})

local LogsScroll = Instance.new("ScrollingFrame", LogsFrame)
LogsScroll.Position = UDim2.new(0, 0, 0, 35)
LogsScroll.Size = UDim2.new(1, 0, 1, -70)
LogsScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
LogsScroll.BackgroundTransparency = 1
LogsScroll.ScrollBarThickness = 6
LogsScroll.Name = "LogsScroll"
LogsScroll.ScrollBarImageTransparency = 1
do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = LogsScroll end

local LogsUIList = Instance.new("UIListLayout", LogsScroll)
LogsUIList.SortOrder = Enum.SortOrder.LayoutOrder
LogsUIList.Padding = UDim.new(0, 2)

local LogsControlBar = CreateInstance("Frame", {
    Name = "LogsControlBar",
    Parent = LogsFrame,
    Size = UDim2.new(1, 0, 0, 35),
    Position = UDim2.new(0, 0, 1, -35),
    BackgroundTransparency = 1
})

local function CreateLogBtn(name, text, xPos)
    local btn = CreateInstance("TextButton", {
        Name = name,
        Parent = LogsControlBar,
        Size = UDim2.new(0, 90, 0, 28),
        Position = UDim2.new(0, xPos, 0.5, -14),
        BackgroundColor3 = Colors.Background,
        BorderSizePixel = 0,
        Text = text,
        TextColor3 = Colors.Text,
        Font = Enum.Font.SourceSansBold,
        TextSize = 15
    })
    do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = btn end
    return btn
end

local LogsClearBtn = CreateLogBtn("Clear", "Clear", 6)
local LogsSaveBtn = CreateLogBtn("Save", "Save", 106)
local LogsAutoBtn = CreateLogBtn("AutoScroll", "Auto: On", 206)

local Emotes = {}
local ThemeColor = Colors.Text
local FavoriteOff = "rbxassetid://10651060677"
local FavoriteOn = "rbxassetid://10651061109"
local FavoritedEmotes = {}
local IsStudio = false

local CustomEmoteList = {
	{"Dance 1", 12521009666},
	{"Dance 2", 12521169800},
	{"Dance 3", 12521178362},
	{"Cheer", 12521021991},
	{"Laugh", 12521018724},
	{"Point", 12521007694},
	{"Wave", 12521004586},
	{"Soldier - Assault Fire", 4713811763},
	{"Soldier - Assault Aim", 4713633512},
	{"Zombie - Attack", 3489169607},
	{"Zombie - Death", 3716468774},
	{"Roblox - Sleep", 2695918332},
	{"Roblox - Quake", 2917204509},
	{"Roblox - Rifle Reload", 3972131105},
	{"Accurate T Pose", 2516930867},
}

local freezeEmotes = false

local function AddEmote(name, id, price)
	if not (name and id) then return end
	table.insert(Emotes, {
		["name"] = name,
		["id"] = id,
		["icon"] = "rbxthumb://type=Asset&id=" .. id .. "&w=150&h=150",
		["price"] = price or 0,
		["index"] = #Emotes + 1
	})
end

local function IsFileFunc(path)
	if IsStudio then return false end
	local success, result = pcall(function() return isfile(path) end)
	return success and result
end

local function ReadFileFunc(path)
	if IsStudio then return nil end
	local success, result = pcall(function() return readfile(path) end)
	return success and result
end

local function WriteFileFunc(path, content)
	if IsStudio then return end
	pcall(function() writefile(path, content) end)
end

if not IsStudio then
	if IsFileFunc("FavoritedEmotes.txt") then
		local data = ReadFileFunc("FavoritedEmotes.txt")
		if data then
			local success, decoded = pcall(function() return HttpService:JSONDecode(data) end)
			if success and type(decoded) == "table" then
				FavoritedEmotes = decoded
			else
				FavoritedEmotes = {}
			end
		end
	else
		WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
	end
end

local function CreateHoverEffect(button)
	button.MouseEnter:Connect(function()
		button.BackgroundColor3 = Colors.TabHover
	end)
	button.MouseLeave:Connect(function()
		button.BackgroundColor3 = Colors.Background
	end)
end

local function StopAnim()
	local character = Players.LocalPlayer.Character
	local humanoid = character and character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
			track:Stop()
		end
	end
end

local function PlayCustomEmote(id)
	StopAnim()
	local character = Players.LocalPlayer.Character
	local humanoid = character and character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end
	local animation = Instance.new("Animation")
	animation.AnimationId = "rbxassetid://" .. tostring(id)
	local track = humanoid:LoadAnimation(animation)
	pcall(function()
		track.Priority = Enum.AnimationPriority.Action
	end)
	track:Play()
	if not freezeEmotes then
		local conn
		conn = RunService.RenderStepped:Connect(function()
			if humanoid and humanoid.MoveDirection.Magnitude > 0 then
				track:Stop()
				if conn then conn:Disconnect() end
			end
		end)
	end
end

local function PlayCatalogEmote(name, id)
	local character = Players.LocalPlayer.Character or Players.LocalPlayer.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if humanoid and humanoid.RigType == Enum.HumanoidRigType.R15 then
		local success, err = pcall(function()
			humanoid:PlayEmoteAndGetAnimTrackById(id)
		end)
		if not success then
			local desc = humanoid:FindFirstChildOfClass("HumanoidDescription")
			if desc then
				desc:AddEmote(name, id)
				humanoid:PlayEmoteAndGetAnimTrackById(id)
			end
		end
	elseif humanoid then
		warn("Emote playback requires R15 rig type.")
	end
end

local function CreateEmoteButton(parentFrame, emoteData)
	local emoteButton = CreateInstance('ImageButton', {
		Name = tostring(emoteData.id),
		LayoutOrder = emoteData.index,
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundColor3 = Colors.Background,
		BorderColor3 = Colors.Border,
		BorderSizePixel = 0,
		Image = emoteData.icon,
		ImageColor3 = ThemeColor,
		ScaleType = Enum.ScaleType.Fit,
		AutoButtonColor = false,
		Parent = parentFrame
	})
	do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = emoteButton end
	CreateHoverEffect(emoteButton)
	local isFavorited = table.find(FavoritedEmotes, emoteData.id) ~= nil
	local favoriteButton = CreateInstance('ImageButton', {
		Name = "Favorite",
		Size = UDim2.new(0.3, 0, 0.3, 0),
		Position = UDim2.new(0.7, 0, 0.7, 0),
		BackgroundTransparency = 1,
		Image = isFavorited and FavoriteOn or FavoriteOff,
		ImageColor3 = ThemeColor,
		AutoButtonColor = false,
		Parent = emoteButton
	})
	do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = favoriteButton end
	favoriteButton.MouseButton1Click:Connect(function()
		local index = table.find(FavoritedEmotes, emoteData.id)
		if index then
			table.remove(FavoritedEmotes, index)
			favoriteButton.Image = FavoriteOff
		else
			table.insert(FavoritedEmotes, emoteData.id)
			favoriteButton.Image = FavoriteOn
		end
		if not IsStudio then
			WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
		end
	end)
	emoteButton.MouseButton1Click:Connect(function()
		PlayCatalogEmote(emoteData.name, emoteData.id)
	end)
	return emoteButton
end

local function CreateCustomEmoteButton(parentFrame, emoteData)
	local name, id = emoteData[1], emoteData[2]
	local emoteButton = CreateInstance('TextButton', {
		Name = tostring(id),
		LayoutOrder = 0,
		Text = name,
		Font = Enum.Font.SourceSans,
		TextSize = 14,
		TextColor3 = ThemeColor,
		TextWrapped = true,
		BackgroundColor3 = Colors.Background,
		BorderColor3 = Colors.Border,
		BorderSizePixel = 0,
		Size = UDim2.new(1, 0, 1, 0),
		AutoButtonColor = false,
		Parent = parentFrame
	})
	do local corner = Instance.new("UICorner") corner.CornerRadius = UDim.new(0, 8) corner.Parent = emoteButton end
	CreateHoverEffect(emoteButton)
	emoteButton.MouseButton1Click:Connect(function()
		PlayCustomEmote(id)
	end)
	return emoteButton
end

local function UpdateEmoteSearchResults()
	local searchText = EmoteSearchBar.Text:lower()
	for _, child in pairs(EmoteScroll:GetChildren()) do
		if child:IsA("ImageButton") and child.Name ~= "Favorite" then
			local emote = nil
			for _, e in pairs(Emotes) do
				if tostring(e.id) == child.Name then
					emote = e
					break
				end
			end
			if emote then
				local isVisible = searchText == "" or string.find(string.lower(emote.name), searchText, 1, true) ~= nil
				child.Visible = isVisible
			end
		end
	end
	local order = 0
	for _, child in pairs(CustomScroll:GetChildren()) do
		if child:IsA("TextButton") then
			if searchText == "" or string.find(string.lower(child.Text), searchText, 1, true) ~= nil then
				child.Visible = true
				child.LayoutOrder = order
				order = order + 1
			else
				child.Visible = false
			end
		end
	end
end

local function LoadEmotes()
	LoadingFrame.Visible = true
	for _, child in ipairs(EmoteScroll:GetChildren()) do
		if not child:IsA("UIGridLayout") and not child:IsA("UIListLayout") and not child:IsA("UIPadding") then
			child:Destroy()
		end
	end
	table.clear(Emotes)
	local params = CatalogSearchParams.new()
	params.AssetTypes = {Enum.AvatarAssetType.EmoteAnimation}
	params.SortType = Enum.CatalogSortType.RecentlyCreated
	params.SortAggregation = Enum.CatalogSortAggregation.AllTime
	params.IncludeOffSale = true
	params.CreatorName = "Roblox"
	params.Limit = 120
	local function getCatalogPage()
		local success, catalogPage = pcall(function()
			return AvatarEditorService:SearchCatalog(params)
		end)
		if not success then
			task.wait(2)
			return getCatalogPage()
		end
		return catalogPage
	end
	local catalogPage = getCatalogPage()
	if not catalogPage then
		warn("Failed to fetch emote catalog.")
		LoadingFrame.Visible = false
		return
	end
	local pages = {}
	while true do
		local currentPageSuccess, currentPage = pcall(function() return catalogPage:GetCurrentPage() end)
		if currentPageSuccess and currentPage then
			table.insert(pages, currentPage)
		end
		if catalogPage.IsFinished then
			break
		end
		local advanceSuccess, _ = pcall(function() catalogPage:AdvanceToNextPageAsync() end)
		if not advanceSuccess then
			task.wait(2)
		end
	end
	local totalEmotes = {}
	for _, page in pairs(pages) do
		for _, emote in pairs(page) do
			table.insert(totalEmotes, emote)
		end
	end
	for _, emote in pairs(totalEmotes) do
		AddEmote(emote.Name, emote.Id, emote.Price)
	end
	AddEmote("Arm Wave", 5915773155)
	AddEmote("Head Banging", 5915779725)
	AddEmote("Face Calisthenics", 9830731012)
	table.sort(Emotes, function(a, b) return a.index < b.index end)
	for _, emoteData in pairs(Emotes) do
		CreateEmoteButton(EmoteScroll, emoteData)
	end
	for _, child in ipairs(CustomScroll:GetChildren()) do
		if not child:IsA("UIGridLayout") and not child:IsA("UIListLayout") and not child:IsA("UIPadding") then
			child:Destroy()
		end
	end
	for _, data in ipairs(CustomEmoteList) do
		CreateCustomEmoteButton(CustomScroll, data)
	end
	UpdateEmoteSearchResults()
	LoadingFrame.Visible = false
end

local maxLogs = 10000
local autoScroll = true
local logs = {}
local filteredLogs = {}
local currentLogSearch = ""

local function getPlayerDisplayName(player)
    return player.DisplayName
end

local function addLog(msg, player)
    local playerName = player and getPlayerDisplayName(player) or "System"
    local fullMsg = playerName .. ": " .. msg
    local lbl = Instance.new("TextLabel")
    lbl.Name = "LogEntry"
    lbl.Text = fullMsg
    lbl.TextWrapped = true
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    lbl.TextYAlignment = Enum.TextYAlignment.Top
    lbl.BackgroundTransparency = 1
    lbl.TextColor3 = Colors.Text
    lbl.Font = Enum.Font.SourceSans
    lbl.TextSize = 14
    lbl.Size = UDim2.new(1, -12, 0, 0)
    lbl.AutomaticSize = Enum.AutomaticSize.Y
    lbl:SetAttribute("OriginalText", fullMsg)
    lbl.Parent = LogsScroll
    local padding = Instance.new("UIPadding")
    padding.PaddingLeft = UDim.new(0, 6)
    padding.PaddingRight = UDim.new(0, 6)
    padding.PaddingTop = UDim.new(0, 2)
    padding.PaddingBottom = UDim.new(0, 2)
    padding.Parent = lbl
    table.insert(logs, fullMsg)
    table.insert(filteredLogs, lbl)
    if #logs > maxLogs then
        table.remove(logs, 1)
        if LogsScroll:FindFirstChild("LogEntry") then
            LogsScroll:FindFirstChild("LogEntry"):Destroy()
        end
    end
    task.wait()
    LogsScroll.CanvasSize = UDim2.new(0, 0, 0, LogsUIList.AbsoluteContentSize.Y)
    if autoScroll then
        LogsScroll.CanvasPosition = Vector2.new(0, LogsScroll.CanvasSize.Y.Offset)
    end
end

local function updateFilteredLogs()
    for _, v in pairs(LogsScroll:GetChildren()) do
        if v:IsA("TextLabel") and v.Name == "LogEntry" then
            v.Visible = false
        end
    end
    filteredLogs = {}
    for _, logLabel in pairs(LogsScroll:GetChildren()) do
        if logLabel:IsA("TextLabel") and logLabel.Name == "LogEntry" then
            local originalText = logLabel:GetAttribute("OriginalText") or ""
            if currentLogSearch == "" or string.find(string.lower(originalText), string.lower(currentLogSearch)) then
                logLabel.Visible = true
                table.insert(filteredLogs, logLabel)
            else
                logLabel.Visible = false
            end
        end
    end
    LogsScroll.CanvasSize = UDim2.new(0, 0, 0, LogsUIList.AbsoluteContentSize.Y)
    if autoScroll then
        LogsScroll.CanvasPosition = Vector2.new(0, LogsScroll.CanvasSize.Y.Offset)
    end
end

LogsSearchBox:GetPropertyChangedSignal("Text"):Connect(function()
    currentLogSearch = LogsSearchBox.Text
    updateFilteredLogs()
end)

for _, plr in pairs(Players:GetPlayers()) do
    plr.Chatted:Connect(function(msg)
        addLog(msg, plr)
    end)
end

Players.PlayerAdded:Connect(function(plr)
    plr.Chatted:Connect(function(msg)
        addLog(msg, plr)
    end)
end)

addLog("Chat logger initialized", nil)

LogsClearBtn.MouseButton1Click:Connect(function()
    for _, v in pairs(LogsScroll:GetChildren()) do
        if v:IsA("TextLabel") and v.Name == "LogEntry" then
            v:Destroy()
        end
    end
    logs = {}
    filteredLogs = {}
end)

LogsSaveBtn.MouseButton1Click:Connect(function()
    local joined = table.concat(logs, "\n")
    if writefile then
        writefile("chat_logs.txt", joined)
        addLog("Chat logs saved to chat_logs.txt", nil)
    else
        setclipboard(joined)
        addLog("Chat logs copied to clipboard", nil)
    end
end)

LogsAutoBtn.MouseButton1Click:Connect(function()
    autoScroll = not autoScroll
    LogsAutoBtn.Text = "Auto: " .. (autoScroll and "On" or "Off")
end)

local currentTab = "EmoteTab"
local tabButtons = {
	EmoteTab = EmoteTabBtn,
	CustomEmoteTab = CustomEmoteTabBtn,
	LogsTab = LogsTabBtn
}
local tabFrames = {
	EmoteTab = {frame = EmoteFrame, scroll = EmoteScroll},
	CustomEmoteTab = {frame = EmoteFrame, scroll = CustomScroll},
	LogsTab = {frame = LogsFrame, scroll = nil}
}

local function switchTab(tabName)
	if currentTab == tabName then return end
	local oldTabData = tabFrames[currentTab]
	local newTabData = tabFrames[tabName]
	local oldButton = tabButtons[currentTab]
	local newButton = tabButtons[tabName]
	oldButton.BackgroundColor3 = Colors.Background
	newButton.BackgroundColor3 = Colors.TabSelected
	if oldTabData.frame ~= newTabData.frame then
		oldTabData.frame.Visible = false
	end
	if oldTabData.scroll then oldTabData.scroll.Visible = false end
	if newTabData.scroll then newTabData.scroll.Visible = true end
	newTabData.frame.Visible = true
	currentTab = tabName
	if tabName == "CustomEmoteTab" then
		FreezeButton.Visible = true
	else
		FreezeButton.Visible = false
	end
end

EmoteTabBtn.MouseButton1Click:Connect(function()
	switchTab("EmoteTab")
end)

CustomEmoteTabBtn.MouseButton1Click:Connect(function()
	switchTab("CustomEmoteTab")
end)

LogsTabBtn.MouseButton1Click:Connect(function()
	switchTab("LogsTab")
end)

local function connectButton(button, downColor, upColor)
	local down = button.MouseButton1Down:Connect(function()
		button.BackgroundColor3 = downColor
	end)
	local up = button.MouseButton1Up:Connect(function()
		button.BackgroundColor3 = upColor
	end)
	local leave = button.MouseLeave:Connect(function()
		button.BackgroundColor3 = upColor
	end)
	return {down, up, leave}
end

connectButton(CloseButton, Colors.Background, Colors.Background)
connectButton(MinimizeButton, Colors.Background, Colors.Background)

local minimized = false
MinimizeButton.MouseButton1Click:Connect(function()
	minimized = not minimized
	if minimized then
		TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			Size = UDim2.new(0, 312, 0, 23)
		}):Play()
	else
		TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			Size = UDim2.new(0, 312, 0, 400)
		}):Play()
	end
end)

local function Cleanup()
	TweenService:Create(MainFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, -312, 0.5, 0)
	}):Play()
	wait(0.5)
	MainGui:Destroy()
end

CloseButton.MouseButton1Click:Connect(Cleanup)
EmoteSearchBar:GetPropertyChangedSignal("Text"):Connect(UpdateEmoteSearchResults)
FreezeButton.MouseButton1Click:Connect(function()
	freezeEmotes = not freezeEmotes
	FreezeButton.Text = "F"
end)

spawn(function()
	LoadEmotes()
end)

MainGui.AncestryChanged:Connect(function()
	if not MainGui:IsDescendantOf(game) then
		MainGui:Destroy()
	end
end)