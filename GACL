if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")

local lp = Players.LocalPlayer
local playerGui = lp:WaitForChild("PlayerGui")

local function showNotification(title, description, imageId)
    pcall(function()
        StarterGui:SetCore("SendNotification", { Title = title; Text = description; Icon = imageId; Duration = 1; })
    end)
end

showNotification("Ghostyys ACL", "Loading Anti Chat & Screenshot Logger...", "rbxassetid://116044006726618")

if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    local startTime = tick()
    task.wait(0.21)

    if _G.GhostyysACLLoaded then
        showNotification("Ghostyys ACL", "Anti Chat & Screenshot Logger already loaded!", "rbxassetid://116044006726618")
        return
    end
    _G.GhostyysACLLoaded = true

    showNotification("Ghostyys ACL", string.format("Anti Chat & Screenshot Logger Loaded in %.2fs!", tick() - startTime), "rbxassetid://116044006726618")

    if setfflag then
        pcall(function()
            setfflag("AbuseReportScreenshot", "False")
            setfflag("AbuseReportScreenshotPercentage", "0")
        end)
    end

    local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
    local spamText = "/e cheer"
    local isPlayingEmote = false
    local useTextMethod = false
    local hasCharacterWithHumanoid = false

    local cheerCount = 0
    local maxCheersPerMessage = 4
    local shouldSendCheer = false

    if not _G.GhostyysACLConnections then
        _G.GhostyysACLConnections = {}
    end

    local function checkCharacterType()
        local char = lp.Character
        if char and char:FindFirstChildOfClass("Humanoid") and char:FindFirstChild("Animate") then
            hasCharacterWithHumanoid = true
        else
            hasCharacterWithHumanoid = false
        end
    end

    local function getIdleAnimationId()
        local char = lp.Character
        if not char then return nil end
        local animate = char:FindFirstChild("Animate")
        if not animate then return nil end
        local idle = animate:FindFirstChild("idle")
        if not idle then return nil end
        local idleAnim1 = idle:FindFirstChild("Animation1")
        if idleAnim1 and idleAnim1:IsA("Animation") then
            return idleAnim1.AnimationId
        end
        local idleAnim2 = idle:FindFirstChild("Animation2")
        if idleAnim2 and idleAnim2:IsA("Animation") then
            return idleAnim2.AnimationId
        end
        return nil
    end

    local function blockCheerAnimation()
        pcall(function()
            local char = lp.Character
            if not char then return end
            local animate = char:FindFirstChild("Animate")
            if not animate then return end
            local cheer = animate:FindFirstChild("cheer")
            if not cheer then return end
            local cheerAnim = cheer:FindFirstChild("CheerAnim")
            if not cheerAnim or not cheerAnim:IsA("Animation") then return end

            local idleAnimId = getIdleAnimationId()
            if idleAnimId then
                cheerAnim.AnimationId = idleAnimId
            end
        end)
    end

    local function setupEmoteDetection(character)
        local humanoid = character:WaitForChild("Humanoid")
        if humanoid then
            humanoid.AnimationPlayed:Connect(function(animationTrack)
                if animationTrack.Name == "cheer" then
                    animationTrack:Stop()
                    blockCheerAnimation()
                end
            end)
        end
    end

    lp.CharacterAdded:Connect(function(character)
        checkCharacterType()
        blockCheerAnimation()
        setupEmoteDetection(character)
    end)

    if lp.Character then
        checkCharacterType()
        blockCheerAnimation()
        setupEmoteDetection(lp.Character)
    end

    task.spawn(function()
        while _G.GhostyysACLLoaded do
            if hasCharacterWithHumanoid then
                blockCheerAnimation()
            end
            task.wait(0.5)
        end
    end)

    local function AntiChatLog(message)
        if message:sub(1, 1) == "/" then
            return message
        else
            return "Ö¼" .. message
        end
    end

    local function startCheerSequence()
        cheerCount = 0
        shouldSendCheer = true

        task.spawn(function()
            for i = 1, maxCheersPerMessage do
                if not shouldSendCheer then break end

                pcall(function()
                    if channel and hasCharacterWithHumanoid and not useTextMethod then
                        channel:SendAsync(spamText)
                    end

                    local sayRemote = ReplicatedStorage:FindFirstChild("SayMessageRequest", true)
                    if hasCharacterWithHumanoid and sayRemote and not useTextMethod then
                        sayRemote:FireServer(spamText, "All")
                    end
                end)

                if i < maxCheersPerMessage then
                    task.wait(0.1)
                end
            end
            shouldSendCheer = false
        end)
    end

    local function setupChatHook()
        if hasCharacterWithHumanoid then
            local chatBar
            local chat = playerGui:FindFirstChild("Chat")
            if chat then
                chatBar = chat:FindFirstChild("ChatBar", true)
            end
            if not chatBar then
                local container = CoreGui:FindFirstChild("TextBoxContainer", true)
                if container then
                    chatBar = container:FindFirstChild("TextBox")
                end
            end
            if not chatBar then
                return
            end
            local connection = chatBar.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    local message = chatBar.Text
                    if useTextMethod then
                        chatBar.Text = ""
                        if message and message ~= "" then
                            local modifiedMessage = AntiChatLog(message)
                            if channel then
                                channel:SendAsync(modifiedMessage)
                            end
                            startCheerSequence()
                        end
                    else
                        if message and message ~= "" then
                            startCheerSequence()
                        end
                    end
                end
            end)
            table.insert(_G.GhostyysACLConnections, connection)
        else
            local ChatBar
            local function findChatBar()
                local textBoxContainer = CoreGui:FindFirstChild("TextBoxContainer", true)
                if textBoxContainer then
                    return textBoxContainer:FindFirstChild("TextBox") or textBoxContainer
                end
                return nil
            end
            ChatBar = findChatBar()
            if ChatBar then
                pcall(function()
                    for _, c in pairs(getconnections(ChatBar.FocusLost)) do
                        c:Disconnect()
                    end
                end)
                local connection = ChatBar.FocusLost:Connect(function(enterPressed)
                    if enterPressed then
                        local message = ChatBar.Text
                        ChatBar.Text = ""
                        if message and message ~= "" then
                            local modifiedMessage = AntiChatLog(message)
                            local Channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
                            if Channel then
                                Channel:SendAsync(modifiedMessage)
                            end
                            startCheerSequence()
                        end
                    end
                end)
                table.insert(_G.GhostyysACLConnections, connection)
            end
        end
    end

    setupChatHook()
else
    if not pcall(function()
        loadstring(game:HttpGet("https://gitlab.com/GhostyySoftworks/G-Projects/-/raw/main/GACL?ref_type=heads"))()
    end) then
        loadstring(game:HttpGet("https://gitlab.com/GhostyySoftworks/G-Projects/-/raw/main/GACL?ref_type=heads"))()
    end
    showNotification("Ghostyys ACL", "Anti Chat & Screenshot Logger Loaded!", "rbxassetid://116044006726618")
end

task.spawn(function()
    repeat
        StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
        task.wait()
    until StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType.Chat)
end)