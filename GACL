if not game:IsLoaded() then game.Loaded:Wait() end
local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")

local lp = Players.LocalPlayer
local playerGui = lp:WaitForChild("PlayerGui")

if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
    local startTime = tick()
    task.wait(0.21)

    local function showNotification(title, description, imageId)
        pcall(function()
            StarterGui:SetCore("SendNotification", {
                Title = title;
                Text = description;
                Icon = imageId;
                Duration = 15;
            })
        end)
    end

    if _G.GhostyyACLLoaded then
        showNotification("Ghostyy ACL", "Anti Chat & Screenshot Logger already loaded!", "rbxassetid://2541869220")
        return
    end
    _G.GhostyyACLLoaded = true
    showNotification("Ghostyy ACL", string.format("Anti Chat & Screenshot Logger Loaded in %.2fs!", tick() - startTime), "rbxassetid://2541869220")

    if setfflag then
        pcall(function()
            setfflag("AbuseReportScreenshot", "False")
            setfflag("AbuseReportScreenshotPercentage", "0")
        end)
    end

    local function getRandomSpamText(length)
        local chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
        local result = {}
        for i = 1, length do
            local rand = math.random(1, #chars)
            table.insert(result, chars:sub(rand, rand))
        end
        return table.concat(result)
    end

    local function spamText()
        return "/e " .. getRandomSpamText(6)
    end

    local useTextMethod = false
    local hasCharacterWithHumanoid = false

    if not _G.GhostyyACLConnections then
        _G.GhostyyACLConnections = {}
    end

    local function checkCharacterType()
        local char = lp.Character
        if char and char:FindFirstChildOfClass("Humanoid") then
            hasCharacterWithHumanoid = true
        else
            hasCharacterWithHumanoid = false
        end
    end

    lp.CharacterAdded:Connect(function(character)
        checkCharacterType()
        useTextMethod = false
    end)

    if lp.Character then
        checkCharacterType()
    end

    local function AntiChatLog(message)
        if message:sub(1, 1) == "/" then
            return message
        else
            return "ּ" .. message
        end
    end

    local function setupChatHook()
        if hasCharacterWithHumanoid then
            local chatBar
            local chat = playerGui:FindFirstChild("Chat")
            if chat then
                chatBar = chat:FindFirstChild("ChatBar", true)
            end
            if not chatBar then
                local container = CoreGui:FindFirstChild("TextBoxContainer", true)
                if container then
                    chatBar = container:FindFirstChild("TextBox")
                end
            end
            if not chatBar then return end
            local connection = chatBar.FocusLost:Connect(function(enterPressed)
                if enterPressed then
                    local message = chatBar.Text
                    if useTextMethod then
                        chatBar.Text = ""
                        if message and message ~= "" then
                            local modifiedMessage = AntiChatLog(message)
                            local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
                            if channel then
                                channel:SendAsync(modifiedMessage)
                            end
                        end
                    end
                end
            end)
            table.insert(_G.GhostyyACLConnections, connection)
        else
            local ChatBar
            local function findChatBar()
                local textBoxContainer = CoreGui:FindFirstChild("TextBoxContainer", true)
                if textBoxContainer then
                    return textBoxContainer:FindFirstChild("TextBox") or textBoxContainer
                end
                return nil
            end
            ChatBar = findChatBar()
            if ChatBar then
                pcall(function()
                    for _, c in pairs(getconnections(ChatBar.FocusLost)) do
                        c:Disconnect()
                    end
                end)
                local connection = ChatBar.FocusLost:Connect(function(enterPressed)
                    if enterPressed then
                        local message = ChatBar.Text
                        ChatBar.Text = ""
                        if message and message ~= "" then
                            local modifiedMessage = AntiChatLog(message)
                            local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
                            if channel then
                                channel:SendAsync(modifiedMessage)
                            end
                        end
                    end
                end)
                table.insert(_G.GhostyyACLConnections, connection)
            end
        end
    end

    setupChatHook()

    local heartbeatConnection = RunService.Heartbeat:Connect(function()
        if not hasCharacterWithHumanoid or useTextMethod then return end
        pcall(function()
            local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
            if channel then
                channel:SendAsync(spamText())
            end
        end)
    end)
    table.insert(_G.GhostyyACLConnections, heartbeatConnection)

    local renderSteppedConnection = RunService.RenderStepped:Connect(function()
        if not hasCharacterWithHumanoid or useTextMethod then return end
        pcall(function()
            local channel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
            if channel then
                channel:SendAsync(spamText())
            end
        end)
    end)
    table.insert(_G.GhostyyACLConnections, renderSteppedConnection)

    task.spawn(function()
        local sayRemote = ReplicatedStorage:FindFirstChild("SayMessageRequest", true)
        while _G.GhostyyACLLoaded do
            if hasCharacterWithHumanoid and sayRemote and not useTextMethod then
                pcall(function()
                    sayRemote:FireServer(spamText(), "All")
                end)
            end
            task.wait(0.04)
        end
    end)

    task.spawn(function()
        local function suppressEmoteError(obj)
            if obj:IsA("TextLabel") and obj.Text:lower():find("you do not own that emote") then
                obj:Destroy()
            end
        end
        for _, obj in pairs(CoreGui:GetDescendants()) do
            suppressEmoteError(obj)
        end
        CoreGui.DescendantAdded:Connect(suppressEmoteError)
    end)
else
    pcall(function()
        loadstring(game:HttpGet("https://gitlab.com/GhostyySoftworks/G-Projects/-/raw/main/GACL?ref_type=heads"))()
    end)
end

task.spawn(function()
    repeat
        StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
        task.wait()
    until StarterGui:GetCoreGuiEnabled(Enum.CoreGuiType.Chat)
end)

task.spawn(function()
    task.wait(5)
end)