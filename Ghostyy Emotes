local function CreateInstance(cls, props)
	local inst = Instance.new(cls)
	for i, v in pairs(props) do
		inst[i] = v
	end
	return inst
end

local Colors = {
	Background = Color3.fromRGB(30, 30, 30),
	Border = Color3.fromRGB(255, 255, 255), 
	Text = Color3.fromRGB(255, 255, 255),
	TabSelected = Color3.fromRGB(30, 30, 30),
	TabHover = Color3.fromRGB(30, 30, 30)
}

local CoreGui = game:GetService("CoreGui")
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local AvatarEditorService = game:GetService("AvatarEditorService")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local ContextActionService = game:GetService("ContextActionService")
local RunService = game:GetService("RunService")

local function ApplyUICornerAndStroke(instance)
	if instance:IsA("GuiObject") and not instance:FindFirstChildOfClass("UICorner") then
		local corner = Instance.new("UICorner")
		corner.CornerRadius = UDim.new(0, 12)
		corner.Parent = instance
		if not instance:FindFirstChildOfClass("UIStroke") then
			local stroke = Instance.new("UIStroke")
			stroke.Thickness = 1
			stroke.Color = Colors.Border
			stroke.Parent = instance
		end
	end
end

local existing = CoreGui:FindFirstChild("EmoteGui")
if existing then
	existing:Destroy()
end

local EmoteGui = CreateInstance("ScreenGui", {
	Name = "EmoteGui",
	ResetOnSpawn = false,
	ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
	Parent = CoreGui
})

local EmoteFrame = CreateInstance('Frame', {
	Name = 'EmoteFrame',
	Parent = EmoteGui,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Size = UDim2.new(0, 312, 0, 389),
	Position = UDim2.new(0, -312, 0.6, -194.5),
	ClipsDescendants = true,
	BackgroundTransparency = 1
})
ApplyUICornerAndStroke(EmoteFrame)
TweenService:Create(EmoteFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
	BackgroundTransparency = 0,
	Position = UDim2.new(0, 0, 0.6, -194.5)
}):Play()

local EmoteLabel = CreateInstance('TextLabel', {
	Name = 'EmoteLabel',
	Parent = EmoteFrame,
	Text = 'GhostyyWare | Emotes',
	Font = Enum.Font.SourceSansBold,
	TextSize = 17,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Size = UDim2.new(1, 0, 0, 23),
	TextColor3 = Colors.Text,
	ZIndex = 2
})
ApplyUICornerAndStroke(EmoteLabel)

local CloseButton = CreateInstance('TextButton', {
	Name = 'CloseButton',
	Parent = EmoteLabel,
	Position = UDim2.new(1, -5, 0.5, 0),
	AnchorPoint = Vector2.new(1, 0.5),
	Size = UDim2.new(0, 22, 0, 22),
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Text = '×',
	Font = Enum.Font.SourceSansBold,
	TextSize = 18,
	TextColor3 = Colors.Text
})
ApplyUICornerAndStroke(CloseButton)

local MinimizeButton = CreateInstance('TextButton', {
	Name = 'MinimizeButton',
	Parent = EmoteLabel,
	Position = UDim2.new(1, -32, 0.5, 0),
	AnchorPoint = Vector2.new(1, 0.5),
	Size = UDim2.new(0, 22, 0, 22),
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Text = '−',
	Font = Enum.Font.SourceSansBold,
	TextSize = 18,
	TextColor3 = Colors.Text
})
ApplyUICornerAndStroke(MinimizeButton)

local FreezeButton = CreateInstance('TextButton', {
	Name = 'FreezeButton',
	Parent = EmoteLabel,
	Text = "F",
	Font = Enum.Font.SourceSans,
	TextSize = 12,
	TextColor3 = Colors.Text,
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Size = UDim2.new(0, 22, 0, 22),
	Position = UDim2.new(1, -59, 0.5, 0),
	AnchorPoint = Vector2.new(1, 0.5),
	Visible = false
})
ApplyUICornerAndStroke(FreezeButton)

local TabContainer = CreateInstance('Frame', {
	Name = 'TabContainer',
	Parent = EmoteFrame,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Position = UDim2.new(0, 0, 0, 23),
	Size = UDim2.new(1, 0, 0, 23),
})
ApplyUICornerAndStroke(TabContainer)

local EmoteTabs = CreateInstance('TextButton', {
	Name = 'EmoteTabs',
	Parent = TabContainer,
	Text = 'Emotes',
	Font = Enum.Font.SourceSansBold,
	TextSize = 15,
	BackgroundColor3 = Colors.TabSelected,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Position = UDim2.new(0, 0, 0, 0),
	Size = UDim2.new(0.5, 0, 1, 0),
	TextColor3 = Colors.Text
})
ApplyUICornerAndStroke(EmoteTabs)

local CustomEmotes = CreateInstance('TextButton', {
	Name = 'CustomEmotes',
	Parent = TabContainer,
	Text = 'Custom Emotes',
	Font = Enum.Font.SourceSansBold,
	TextSize = 14,
	BackgroundColor3 = Colors.Background,
	BorderColor3 = Colors.Border,
	BorderSizePixel = 0,
	Position = UDim2.new(0.5, 0, 0, 0),
	Size = UDim2.new(0.5, 0, 1, 0),
	TextColor3 = Colors.Text
})
ApplyUICornerAndStroke(CustomEmotes)

local SearchBar = CreateInstance("TextBox", {
	PlaceholderText = "Search emotes...",
	PlaceholderColor3 = Colors.Text,
	TextColor3 = Colors.Text,
	Text = "",
	TextSize = 14,
	Font = Enum.Font.SourceSans,
	Size = UDim2.new(1, -10, 0, 20),
	Position = UDim2.new(0, 5, 0, 48),
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	TextXAlignment = Enum.TextXAlignment.Left,
	ClearTextOnFocus = true,
	Parent = EmoteFrame
})
ApplyUICornerAndStroke(SearchBar)
local searchCorner = SearchBar:FindFirstChildOfClass("UICorner")
if searchCorner then searchCorner.CornerRadius = UDim.new(0, 8) end

local EmoteScroll = CreateInstance('ScrollingFrame', {
	Name = 'EmoteScroll',
	Parent = EmoteFrame,
	Position = UDim2.new(0, 0, 0, 72),
	Size = UDim2.new(1, 0, 1, -72),
	CanvasSize = UDim2.new(0, 0, 0, 0),
	ScrollBarThickness = 6,
	ScrollBarImageTransparency = 1,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Visible = true,
	AutomaticCanvasSize = Enum.AutomaticSize.Y
})

local CustomScroll = CreateInstance('ScrollingFrame', {
	Name = 'CustomScroll',
	Parent = EmoteFrame,
	Position = UDim2.new(0, 0, 0, 72),
	Size = UDim2.new(1, 0, 1, -72),
	CanvasSize = UDim2.new(0, 0, 0, 0),
	ScrollBarThickness = 6,
	ScrollBarImageTransparency = 1,
	BackgroundColor3 = Colors.Background,
	BorderSizePixel = 0,
	Visible = false,
	AutomaticCanvasSize = Enum.AutomaticSize.Y
})

local GridLayout1 = CreateInstance('UIGridLayout', {
	CellSize = UDim2.new(0, 90, 0, 90),
	CellPadding = UDim2.new(0, 5, 0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = EmoteScroll
})

local GridLayout2 = CreateInstance('UIGridLayout', {
	CellSize = UDim2.new(0, 90, 0, 90),
	CellPadding = UDim2.new(0, 5, 0, 5),
	SortOrder = Enum.SortOrder.LayoutOrder,
	Parent = CustomScroll
})

local LoadingFrame = CreateInstance('Frame', {
	Name = "LoadingFrame",
	Size = UDim2.new(1, 0, 1, 0),
	BackgroundTransparency = 0.5,
	BackgroundColor3 = Colors.Background,
	ZIndex = 10,
	Visible = false,
	Parent = EmoteFrame
})
ApplyUICornerAndStroke(LoadingFrame)

local LoadingContainer = CreateInstance('Frame', {
	Size = UDim2.new(0.6, 0, 0.3, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.5, 0),
	BackgroundTransparency = 1,
	Parent = LoadingFrame
})
ApplyUICornerAndStroke(LoadingContainer)

local LoadingSpinner = CreateInstance('ImageLabel', {
	Image = "rbxassetid://9125473266",
	Size = UDim2.new(0.3, 0, 0.5, 0),
	AnchorPoint = Vector2.new(0.5, 0.5),
	Position = UDim2.new(0.5, 0, 0.35, 0),
	BackgroundTransparency = 1,
	Parent = LoadingContainer
})
ApplyUICornerAndStroke(LoadingSpinner)

local LoadingText = CreateInstance('TextLabel', {
	Text = "Loading Emotes...",
	TextSize = 16,
	Font = Enum.Font.SourceSansSemibold,
	TextColor3 = Colors.Text,
	Size = UDim2.new(1, 0, 0.3, 0),
	Position = UDim2.new(0, 0, 0.65, 0),
	BackgroundTransparency = 1,
	TextXAlignment = Enum.TextXAlignment.Center,
	Parent = LoadingContainer
})
ApplyUICornerAndStroke(LoadingText)

local Emotes = {}
local ThemeColor = Colors.Text
local FavoriteOff = "rbxassetid://10651060677"
local FavoriteOn = "rbxassetid://10651061109"
local FavoritedEmotes = {}
local IsStudio = false

local CustomEmoteList = {
	{"Dance 1", 12521009666},
	{"Dance 2", 12521169800},
	{"Dance 3", 12521178362},
	{"Cheer", 12521021991},
	{"Laugh", 12521018724},
	{"Point", 12521007694},
	{"Wave", 12521004586},
	{"Soldier - Assault Fire", 4713811763},
	{"Soldier - Assault Aim", 4713633512},
	{"Zombie - Attack", 3489169607},
	{"Zombie - Death", 3716468774},
	{"Roblox - Sleep", 2695918332},
	{"Roblox - Quake", 2917204509},
	{"Roblox - Rifle Reload", 3972131105},
	{"Accurate T Pose", 2516930867},
}

local freezeEmotes = false

local function AddEmote(name, id, price)
	if not (name and id) then return end
	table.insert(Emotes, {
		["name"] = name,
		["id"] = id,
		["icon"] = "rbxthumb://type=Asset&id=" .. id .. "&w=150&h=150",
		["price"] = price or 0,
		["index"] = #Emotes + 1
	})
end

local function IsFileFunc(path)
	if IsStudio then return false end
	local success, result = pcall(function() return isfile(path) end)
	return success and result
end

local function ReadFileFunc(path)
	if IsStudio then return nil end
	local success, result = pcall(function() return readfile(path) end)
	return success and result
end

local function WriteFileFunc(path, content)
	if IsStudio then return end
	pcall(function() writefile(path, content) end)
end

if not IsStudio then
	if IsFileFunc("FavoritedEmotes.txt") then
		local data = ReadFileFunc("FavoritedEmotes.txt")
		if data then
			local success, decoded = pcall(function() return HttpService:JSONDecode(data) end)
			if success and type(decoded) == "table" then
				FavoritedEmotes = decoded
			else
				FavoritedEmotes = {}
			end
		end
	else
		WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
	end
end

local function CreateHoverEffect(button)
	button.MouseEnter:Connect(function()
		button.BackgroundColor3 = Colors.TabHover
	end)
	button.MouseLeave:Connect(function()
		button.BackgroundColor3 = Colors.Background
	end)
end

local function StopAnim()
	local LocalPlayer = Players.LocalPlayer
	local character = LocalPlayer.Character
	local humanoid = character and character:FindFirstChildOfClass("Humanoid")
	if humanoid then
		for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
			track:Stop()
		end
	end
end

local function PlayCustomEmote(id)
	StopAnim()
	local LocalPlayer = Players.LocalPlayer
	local character = LocalPlayer.Character
	local humanoid = character and character:FindFirstChildOfClass("Humanoid")
	if not humanoid then return end
	local animation = Instance.new("Animation")
	animation.AnimationId = "rbxassetid://" .. tostring(id)
	local track = humanoid:LoadAnimation(animation)
	pcall(function()
		track.Priority = Enum.AnimationPriority.Action
	end)
	track:Play()
	if not freezeEmotes then
		local conn
		conn = RunService.RenderStepped:Connect(function()
			if humanoid and humanoid.MoveDirection.Magnitude > 0 then
				track:Stop()
				if conn then conn:Disconnect() end
			end
		end)
	end
end

local function PlayCatalogEmote(name, id)
	local LocalPlayer = Players.LocalPlayer
	local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
	local humanoid = character:FindFirstChildOfClass("Humanoid")
	if humanoid and humanoid.RigType == Enum.HumanoidRigType.R15 then
		local success, err = pcall(function()
			humanoid:PlayEmoteAndGetAnimTrackById(id)
		end)
		if not success then
			local desc = humanoid:FindFirstChildOfClass("HumanoidDescription")
			if desc then
				desc:AddEmote(name, id)
				humanoid:PlayEmoteAndGetAnimTrackById(id)
			end
		end
	elseif humanoid then
		warn("Emote playback requires R15 rig type.")
	end
end

local function CreateEmoteButton(parentFrame, emoteData)
	local emoteButton = CreateInstance('ImageButton', {
		Name = tostring(emoteData.id),
		LayoutOrder = emoteData.index,
		Size = UDim2.new(1, 0, 1, 0),
		BackgroundColor3 = Colors.Background,
		BorderColor3 = Colors.Border,
		BorderSizePixel = 0,
		Image = emoteData.icon,
		ImageColor3 = ThemeColor,
		ScaleType = Enum.ScaleType.Fit,
		AutoButtonColor = false,
		Parent = parentFrame
	})
	ApplyUICornerAndStroke(emoteButton)
	CreateHoverEffect(emoteButton)

	local isFavorited = table.find(FavoritedEmotes, emoteData.id) ~= nil
	local favoriteButton = CreateInstance('ImageButton', {
		Name = "Favorite",
		Size = UDim2.new(0.3, 0, 0.3, 0),
		Position = UDim2.new(0.7, 0, 0.7, 0),
		BackgroundTransparency = 1,
		Image = isFavorited and FavoriteOn or FavoriteOff,
		ImageColor3 = ThemeColor,
		AutoButtonColor = false,
		Parent = emoteButton
	})
	ApplyUICornerAndStroke(favoriteButton)

	favoriteButton.MouseButton1Click:Connect(function()
		local index = table.find(FavoritedEmotes, emoteData.id)
		if index then
			table.remove(FavoritedEmotes, index)
			favoriteButton.Image = FavoriteOff
		else
			table.insert(FavoritedEmotes, emoteData.id)
			favoriteButton.Image = FavoriteOn
		end
		if not IsStudio then
			WriteFileFunc("FavoritedEmotes.txt", HttpService:JSONEncode(FavoritedEmotes))
		end
	end)

	emoteButton.MouseButton1Click:Connect(function()
		PlayCatalogEmote(emoteData.name, emoteData.id)
	end)

	return emoteButton
end

local function CreateCustomEmoteButton(parentFrame, emoteData)
	local name, id = emoteData[1], emoteData[2]
	local emoteButton = CreateInstance('TextButton', {
		Name = tostring(id),
		LayoutOrder = 0,
		Text = name,
		Font = Enum.Font.SourceSans,
		TextSize = 14,
		TextColor3 = ThemeColor,
		TextWrapped = true,
		BackgroundColor3 = Colors.Background,
		BorderColor3 = Colors.Border,
		BorderSizePixel = 0,
		Size = UDim2.new(1, 0, 1, 0),
		AutoButtonColor = false,
		Parent = parentFrame
	})
	ApplyUICornerAndStroke(emoteButton)
	CreateHoverEffect(emoteButton)

	emoteButton.MouseButton1Click:Connect(function()
		PlayCustomEmote(id)
	end)

	return emoteButton
end

local function UpdateSearchResults()
	local searchText = SearchBar.Text:lower()
	for _, child in pairs(EmoteScroll:GetChildren()) do
		if child:IsA("ImageButton") and child.Name ~= "Favorite" then
			local emote = nil
			for _, e in pairs(Emotes) do
				if tostring(e.id) == child.Name then
					emote = e
					break
				end
			end
			if emote then
				local isVisible = searchText == "" or string.find(string.lower(emote.name), searchText, 1, true) ~= nil
				child.Visible = isVisible
			end
		end
	end

	local order = 0
	for _, child in pairs(CustomScroll:GetChildren()) do
		if child:IsA("TextButton") then
			if searchText == "" or string.find(string.lower(child.Text), searchText, 1, true) ~= nil then
				child.Visible = true
				child.LayoutOrder = order
				order = order + 1
			else
				child.Visible = false
			end
		end
	end
end

local function LoadEmotes()
	LoadingFrame.Visible = true

	for _, child in ipairs(EmoteScroll:GetChildren()) do
		if not child:IsA("UIGridLayout") and not child:IsA("UIListLayout") and not child:IsA("UIPadding") then
			child:Destroy()
		end
	end
	table.clear(Emotes)

	local params = CatalogSearchParams.new()
	params.AssetTypes = {Enum.AvatarAssetType.EmoteAnimation}
	params.SortType = Enum.CatalogSortType.RecentlyCreated
	params.SortAggregation = Enum.CatalogSortAggregation.AllTime
	params.IncludeOffSale = true
	params.CreatorName = "Roblox"
	params.Limit = 120

	local function getCatalogPage()
		local success, catalogPage = pcall(function()
			return AvatarEditorService:SearchCatalog(params)
		end)
		if not success then
			task.wait(2)
			return getCatalogPage()
		end
		return catalogPage
	end

	local catalogPage = getCatalogPage()
	if not catalogPage then
		warn("Failed to fetch emote catalog.")
		LoadingFrame.Visible = false
		return
	end

	local pages = {}
	while true do
		local currentPageSuccess, currentPage = pcall(function() return catalogPage:GetCurrentPage() end)
		if currentPageSuccess and currentPage then
			table.insert(pages, currentPage)
		end
		if catalogPage.IsFinished then
			break
		end
		local advanceSuccess, _ = pcall(function() catalogPage:AdvanceToNextPageAsync() end)
		if not advanceSuccess then
			task.wait(2)
		end
	end

	local totalEmotes = {}
	for _, page in pairs(pages) do
		for _, emote in pairs(page) do
			table.insert(totalEmotes, emote)
		end
	end

	for _, emote in pairs(totalEmotes) do
		AddEmote(emote.Name, emote.Id, emote.Price)
	end

	AddEmote("Arm Wave", 5915773155)
	AddEmote("Head Banging", 5915779725)
	AddEmote("Face Calisthenics", 9830731012)

	table.sort(Emotes, function(a, b) return a.index < b.index end)

	for _, emoteData in pairs(Emotes) do
		CreateEmoteButton(EmoteScroll, emoteData)
	end

	for _, child in ipairs(CustomScroll:GetChildren()) do
		if not child:IsA("UIGridLayout") and not child:IsA("UIListLayout") and not child:IsA("UIPadding") then
			child:Destroy()
		end
	end

	for _, data in ipairs(CustomEmoteList) do
		CreateCustomEmoteButton(CustomScroll, data)
	end

	UpdateSearchResults()
	LoadingFrame.Visible = false
end

local function connectButton(button, downColor, upColor)
	local down = button.MouseButton1Down:Connect(function()
		button.BackgroundColor3 = downColor
	end)
	local up = button.MouseButton1Up:Connect(function()
		button.BackgroundColor3 = upColor
	end)
	local leave = button.MouseLeave:Connect(function()
		button.BackgroundColor3 = upColor
	end)
	return {down, up, leave}
end

connectButton(CloseButton, Colors.Background, Colors.Background)
connectButton(MinimizeButton, Colors.Background, Colors.Background)

local currentTab = "EmoteTabs"
local tabButtons = {
	EmoteTabs = EmoteTabs,
	CustomEmotes = CustomEmotes
}
local tabFrames = {
	EmoteTabs = EmoteScroll,
	CustomEmotes = CustomScroll
}

local function switchTab(tabName)
	if currentTab == tabName then return end
	local oldFrame = tabFrames[currentTab]
	local newFrame = tabFrames[tabName]
	local oldButton = tabButtons[currentTab]
	local newButton = tabButtons[tabName]

	TweenService:Create(oldFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		Size = UDim2.new(0.8, 0, 1, -72),
		Position = UDim2.new(0.1, 0, 0, 72),
		BackgroundTransparency = 1
	}):Play()
	oldButton.BackgroundColor3 = Colors.Background
	newButton.BackgroundColor3 = Colors.TabSelected
	wait(0.2)
	oldFrame.Visible = false
	newFrame.Visible = true
	newFrame.Size = UDim2.new(0.8, 0, 1, -72)
	newFrame.Position = UDim2.new(0.1, 0, 0, 72)
	newFrame.BackgroundTransparency = 1
	TweenService:Create(newFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		Size = UDim2.new(1, 0, 1, -72),
		Position = UDim2.new(0, 0, 0, 72),
		BackgroundTransparency = 0
	}):Play()
	currentTab = tabName
	if tabName == "CustomEmotes" then
		FreezeButton.Visible = true
	else
		FreezeButton.Visible = false
	end
end

EmoteTabs.MouseButton1Click:Connect(function()
	switchTab("EmoteTabs")
end)
CustomEmotes.MouseButton1Click:Connect(function()
	switchTab("CustomEmotes")
end)

local minimized = false
MinimizeButton.MouseButton1Click:Connect(function()
	minimized = not minimized
	if minimized then
		TweenService:Create(EmoteFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			Size = UDim2.new(0, 312, 0, 23)
		}):Play()
	else
		TweenService:Create(EmoteFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
			Size = UDim2.new(0, 312, 0, 389)
		}):Play()
	end
end)

local function Cleanup()
	TweenService:Create(EmoteFrame, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
		BackgroundTransparency = 1,
		Position = UDim2.new(0, -312, 0.6, -194.5)
	}):Play()
	wait(0.5)
	EmoteGui:Destroy()
end
CloseButton.MouseButton1Click:Connect(Cleanup)

SearchBar:GetPropertyChangedSignal("Text"):Connect(UpdateSearchResults)

FreezeButton.MouseButton1Click:Connect(function()
	freezeEmotes = not freezeEmotes
	FreezeButton.Text = "F"
end)

spawn(function()
	LoadEmotes()
end)

EmoteGui.AncestryChanged:Connect(function()
	if not EmoteGui:IsDescendantOf(game) then
		EmoteGui:Destroy()
	end
end)