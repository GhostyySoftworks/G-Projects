local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait()

local CHAT_VERSION = TextChatService.ChatVersion
local IS_BUBBLE_CHAT_ENABLED = TextChatService.BubbleChatConfiguration.Enabled
local IS_TEXT_CHAT_ENABLED = TextChatService:FindFirstChild("TextChannels") 
    and TextChatService.TextChannels:FindFirstChild("RBXGeneral") ~= nil

local OBFUSCATION_LAYERS = {
    ZeroWidth = {"\u{200B}", "\u{200C}", "\u{200D}", "\u{2060}", "\u{FEFF}"},
    Invisible = {"\u{E0000}", "᠎", " ", "⁠", "￼", "�"},
    Special = {"\u{202A}", "\u{202B}", "\u{202D}", "\u{202E}"}
}

local CONFIG = {
    MessageCooldown = 0.3,
    MaxMessageLength = 250,
    UseBidirectionalObfuscation = true
}

local FEATURES = {
    CanHook = (type(hookfunction) == "function") or (type(replaceclosure) == "function"),
    CanProtect = (type(newcclosure) == "function") or (type(protect_function) == "function"),
    CanSetFlags = (type(setfflag) == "function") or (type(setsimulationflag) == "function"),
    HasMemoryAccess = type(writefile) == "function"
}

local lastMessageTime = 0
local function rateLimitedNotify(title, text, duration)
    local now = os.clock()
    if now - lastMessageTime >= CONFIG.MessageCooldown then
        lastMessageTime = now
        pcall(StarterGui.SetCore, StarterGui, "SendNotification", {
            Title = title,
            Text = text,
            Duration = duration or 3
        })
    end
end

local function AdvancedChatObfuscation(message)
    if type(message) ~= "string" then return message end
    if message:sub(1, 1) == "/" then return message end
    
    message = message:sub(1, CONFIG.MaxMessageLength)
    
    return message:gsub(".", function(char)
        local parts = {char}
        
        table.insert(parts, OBFUSCATION_LAYERS.ZeroWidth[math.random(#OBFUSCATION_LAYERS.ZeroWidth)])
        
        if CONFIG.UseBidirectionalObfuscation then
            table.insert(parts, OBFUSCATION_LAYERS.Special[math.random(#OBFUSCATION_LAYERS.Special)])
        end
        
        if math.random() > 0.5 then
            parts[1], parts[2] = parts[2], parts[1]
        end
        
        return table.concat(parts)
    end)
end

local function ConfigureTextChatService()
    if CHAT_VERSION ~= Enum.ChatVersion.TextChatService then return end
    
    pcall(function()
        TextChatService.OnIncomingMessage = function(message)
            if message.TextSource then
                local player = Players:GetPlayerByUserId(message.TextSource.UserId)
                if player and player ~= LocalPlayer then
                    return {
                        Text = AdvancedChatObfuscation(message.Text),
                        TextSource = message.TextSource,
                        Metadata = message.Metadata
                    }
                end
            end
            return message
        end
    end)

    local function configureChannel(channel)
        if not channel:IsA("TextChannel") or not FEATURES.CanHook then return end

        if channel.postAsync then
            local originalPost = channel.postAsync
            channel.postAsync = function(self, message)
                if type(message) == "string" then
                    message = AdvancedChatObfuscation(message)
                end
                return originalPost(self, message)
            end
        end
    end

    for _, channel in ipairs(TextChatService.TextChannels:GetChildren()) do
        task.spawn(configureChannel, channel)
    end

    TextChatService.TextChannels.ChildAdded:Connect(function(channel)
        task.wait(0.5)
        task.spawn(configureChannel, channel)
    end)
end

local function ConfigureBubbleChat()
    if not IS_BUBBLE_CHAT_ENABLED then return end
    
    if FEATURES.CanHook and LocalPlayer.Character then
        local function processBubble(char)
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local originalDisplay = humanoid.DisplayDistanceType
                humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None
                
                if char:FindFirstChild("Head") then
                    local bubble = char.Head:FindFirstChild("ChatBubble")
                    if bubble then
                        bubble:Destroy()
                    end
                end
            end
        end
        
        LocalPlayer.CharacterAdded:Connect(processBubble)
        if LocalPlayer.Character then
            processBubble(LocalPlayer.Character)
        end
    end
end

local function ConfigureLegacyChat()
    local chatEvents = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
    if not chatEvents then return end
    
    local sayMessage = chatEvents:FindFirstChild("SayMessageRequest")
    if sayMessage and FEATURES.CanHook then
        local originalFire = sayMessage.FireServer
        sayMessage.FireServer = function(self, message, ...)
            if type(message) == "string" then
                message = AdvancedChatObfuscation(message)
            end
            return originalFire(self, message, ...)
        end
    end
    
    local onMessageDone = chatEvents:FindFirstChild("OnMessageDoneFiltering")
    if onMessageDone and FEATURES.CanHook then
        local originalInvoke = onMessageDone.InvokeServer
        onMessageDone.InvokeServer = function(self, ...)
            local args = {...}
            if type(args[2]) == "string" then
                args[2] = AdvancedChatObfuscation(args[2])
            end
            return originalInvoke(self, unpack(args))
        end
    end
end

local function InitializeProtections()
    if LocalPlayer:FindFirstChild("TextChatProtectionLoaded") then return end
    local marker = Instance.new("BoolValue")
    marker.Name = "TextChatProtectionLoaded"
    marker.Parent = LocalPlayer
    
    ConfigureTextChatService()
    ConfigureBubbleChat()
    
    task.defer(ConfigureLegacyChat)
    
    task.delay(3, function()
        rateLimitedNotify("Chat Protection", 
            string.format("Active (Mode: %s)", 
                CHAT_VERSION == Enum.ChatVersion.TextChatService and "Modern" or "Legacy"), 
            5)
    end)
end

if IS_TEXT_CHAT_ENABLED then
    LocalPlayer.OnTeleport:Once(function(state)
        if state == Enum.TeleportState.InProgress then
            _G.TextChatProtectionConfig = CONFIG
        end
    end)
    
    local success = pcall(function()
        if CHAT_VERSION == Enum.ChatVersion.TextChatService then
            TextChatService:WaitForChild("TextChannels")
        end
    end)
    
    if success then
        InitializeProtections()
    else
        task.delay(5, InitializeProtections)
    end
else
    warn("Text chat not enabled - protection system limited")
end