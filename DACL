if not game:IsLoaded() then game.Loaded:Wait() end

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local zwChars = {
    "\u{200B}", "\u{200C}", "\u{200D}", "\u{2060}", "\u{FEFF}",
    "\u{E0000}", "᠎", " ", "⁠", "￼", "�", "​", "‌", "‍", "⁡", "⁢", "⁣"
}

local features = {
    setflag = (type(setfflag) == "function") or (type(setfflags) == "function"),
    hookfunction = (type(hookfunction) == "function") or 
                  (type(replaceclosure) == "function"),
    newcclosure = (type(newcclosure) == "function") or 
                 (type(protect_function) == "function",
    writefile = type(writefile) == "function"
}

local config = {
    AntiScreenshot = true,
    AntiChatLog = true,
    AntiReport = true,
    ForceEnableChat = true
}

local function notify(title, text, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Icon = "rbxassetid://2541869220",
            Duration = duration or 5
        })
    end)
end

local function safeHook(func, newFunc)
    if features.hookfunction then
        if type(hookfunction) == "function" then
            return hookfunction(func, newFunc)
        elseif type(replaceclosure) == "function" then
            return replaceclosure(func, newFunc)
        end
    end
    return func
end

local function protectFunc(func)
    if features.newcclosure then
        if type(newcclosure) == "function" then
            return newcclosure(func)
        elseif type(protect_function) == "function" then
            return protect_function(func)
        end
    end
    return func
end

local function applyMemoryPatches()
    if not features.writefile then return end
    
    local patches = {
        {"FInt.AbuseReportScreenshot", "0"},
        {"FFlag.AbuseReportScreenshot", "False"},
        {"FInt.AbuseReportScreenshotPercentage", "0"},
        {"FInt.AbuseReportScreenshotQuality", "0"},
        {"FInt.AbuseReportScreenshotMaxResolution", "0"}
    }
    
    for _, patch in ipairs(patches) do
        pcall(writefile, patch[1], patch[2])
    end
end

local function setScreenshotFlags(value)
    if not features.setflag then return end
    
    local flagValue = value and "0" or "1"
    local flags = {
        "AbuseReportScreenshot",
        "AbuseReportScreenshotPercentage",
        "AbuseReportScreenshotQuality",
        "AbuseReportScreenshotMaxResolution"
    }
    
    local setter = type(setfflags) == "function" and setfflags or setfflag
    for _, flag in ipairs(flags) do
        pcall(setter, flag, flagValue)
    end
end

local function hookScreenshotFunction()
    if not features.hookfunction then return end
    
    local success, screenshotFunc = pcall(function()
        return game:GetService("Players").TakeScreenshot
    end)
    
    if success and screenshotFunc then
        safeHook(screenshotFunc, protectFunc(function()
            return nil
        end))
    end
end

local function AdvancedAntiLog(message)
    if type(message) ~= "string" or message:sub(1, 1) == "/" then 
        return message 
    end
    
    return message:gsub(".", function(c)
        local layers = math.random(1, 3)
        local result = c
        for _ = 1, layers do
            result = result .. zwChars[math.random(#zwChars)]
        end
        return result
    end)
end

local function protectNewChatSystem()
    if TextChatService.ChatVersion ~= Enum.ChatVersion.TextChatService then return end
    
    local function hookSendAsync(channel)
        if not features.hookfunction then return end
        
        local oldSend = channel.SendAsync
        safeHook(oldSend, protectFunc(function(self, message, ...)
            if config.AntiChatLog and type(message) == "string" then
                setScreenshotFlags(true)
                message = AdvancedAntiLog(message)
                task.delay(1, setScreenshotFlags, false)
            end
            return oldSend(self, message, ...)
        end))
    end

    for _, channel in ipairs(TextChatService.TextChannels:GetChildren()) do
        if channel:IsA("TextChannel") then
            pcall(hookSendAsync, channel)
        end
    end

    TextChatService.TextChannels.ChildAdded:Connect(function(channel)
        if channel:IsA("TextChannel") then
            pcall(hookSendAsync, channel)
        end
    end)
end

local function protectLegacyChat()
    local chatRemotes = {
        ReplicatedStorage:FindFirstChild("SayMessageRequest"),
        ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents") and
            ReplicatedStorage.DefaultChatSystemChatEvents:FindFirstChild("SayMessageRequest")
    }

    for _, remote in ipairs(chatRemotes) do
        if remote and features.hookfunction then
            local oldFire = remote.FireServer
            safeHook(oldFire, protectFunc(function(self, message, ...)
                if config.AntiChatLog and type(message) == "string" then
                    setScreenshotFlags(true)
                    message = AdvancedAntiLog(message)
                    task.delay(1, setScreenshotFlags, false)
                end
                return oldFire(self, message, ...)
            end))
        end
    end
end

local function hookReportFunctions()
    if not features.hookfunction then return end
    
    local reportFunctions = {
        Players.ReportAbuse,
        game:GetService("ScriptContext").ReportAbuse
    }
    
    for _, func in ipairs(reportFunctions) do
        pcall(function()
            safeHook(func, protectFunc(function(...)
                return "Report blocked by protection system"
            end))
        end)
    end
end

local function initializeProtections()
    if LocalPlayer:FindFirstChild("ProtectionInitialized") then return end
    
    local marker = Instance.new("BoolValue")
    marker.Name = "ProtectionInitialized"
    marker.Parent = LocalPlayer

    notify("Protection System", "Initializing...", 2)

    if config.AntiScreenshot then
        applyMemoryPatches()
        setScreenshotFlags(false)
        hookScreenshotFunction()
    end

    if config.AntiChatLog then
        protectNewChatSystem()
        protectLegacyChat()
    end

    if config.AntiReport then
        hookReportFunctions()
    end

    if config.ForceEnableChat then
        spawn(function()
            while true do
                pcall(function() 
                    StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true) 
                end)
                task.wait(5)
            end
        end)
    end

    notify("Protection System", "All protections activated!\nChat & Screenshot secured", 5)
end

local function playerReady()
    repeat task.wait() until LocalPlayer and TextChatService
    notify("Protection System", "Game loaded, starting protections...", 2)
    task.wait(1)
    initializeProtections()
end

coroutine.wrap(playerReady)()