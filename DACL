if not game:IsLoaded() then
    game.Loaded:Wait()
end

local Players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer

local function showNotification(title, text, duration, icon)
    pcall(function()
        StarterGui:SetCore("SendNotification", {
            Title = title,
            Text = text,
            Icon = icon or "rbxassetid://2541869220",
            Duration = duration or 5
        })
    end)
end

showNotification("DD'S ACL", "Loading Anti-Chat & Screenshot Protections...", 3)

local features = {
    setflag = type(setfflag) == "function",
    request = type(request) == "function" or 
             (type(http) == "table" and type(http.request) == "function") or
             (type(syn) == "table" and type(syn.request) == "function"),
    hookfunction = type(hookfunction) == "function" or 
                  type(replaceclosure) == "function",
    newcclosure = type(newcclosure) == "function" or 
                 type(protect_function) == "function",
    getgc = type(getgc) == "function",
    getconnections = type(getconnections) == "function" or
                    (type(syn) == "table" and type(syn.getconnections) == "function")
}

local function safehook(func, newfunc)
    if type(hookfunction) == "function" then
        return hookfunction(func, newfunc)
    elseif type(replaceclosure) == "function" then
        return replaceclosure(func, newfunc)
    end
    return func
end

local function safeprotect(func)
    if type(newcclosure) == "function" then
        return newcclosure(func)
    elseif type(protect_function) == "function" then
        return protect_function(func)
    end
    return func
end

local function AntiChatLog(message)
    if message:sub(1, 1) == "/" then
        return message
    end
    
    local zwChars = {"‌", "‍", "⁡", "⁢", "⁣", "​"}
    local protected = "​"
    
    for i = 1, #message do
        local char = message:sub(i, i)
        protected = protected .. char .. zwChars[(i % #zwChars) + 1]
    end
    
    return protected .. "​"
end

local function applyScreenshotProtection()
    if not features.setflag then 
        showNotification("DD'S ACL", "Warning: Screenshot protection limited (missing setfflag)", 5)
        return 
    end
    
    local flags = {
        "AbuseReportScreenshot",
        "AbuseReportScreenshotPercentage",
        "AbuseReportScreenshotQuality",
        "AbuseReportScreenshotMaxResolution",
        "ScreenShotQualityLevel",
        "ScreenShotBufferSize"
    }
    
    local successCount = 0
    for _, flag in ipairs(flags) do
        local success = pcall(setfflag, flag, "0")
        if success then successCount = successCount + 1 end
    end
    
    showNotification("DD'S ACL", string.format("Screenshot protection applied (%d/%d flags)", successCount, #flags), 3)
end

local function protectNewChatSystem()
    if TextChatService.ChatVersion ~= Enum.ChatVersion.TextChatService then return end
    
    pcall(function()
        local originalOnIncomingMessage = TextChatService.OnIncomingMessage
        TextChatService.OnIncomingMessage = function(message)
            if originalOnIncomingMessage then
                originalOnIncomingMessage(message)
            end
            
            if message and message.Text then
                local sender = nil
                if message.UserId then
                    sender = Players:GetPlayerByUserId(message.UserId)
                end
                
                if not sender or sender ~= LocalPlayer then
                    return {
                        Text = AntiChatLog(message.Text),
                        PrefixText = message.PrefixText,
                        TextChannel = message.TextChannel
                    }
                end
            end
            return nil
        end
    end)
    
    local mainChannel = TextChatService.TextChannels:FindFirstChild("RBXGeneral")
    if mainChannel and features.hookfunction then
        pcall(function()
            local oldSendAsync = safehook(mainChannel.SendAsync, safeprotect(function(self, message, ...)
                if type(message) == "string" then
                    message = AntiChatLog(message)
                end
                return oldSendAsync(self, message, ...)
            end))
        end)
    end
    
    showNotification("DD'S ACL", "New chat system protected", 3)
end

local function protectLegacyChat()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local ChatRemote = ReplicatedStorage:FindFirstChild("SayMessageRequest", true) or 
                      ReplicatedStorage:FindFirstChild("SayMessageRequest", true)
    
    if ChatRemote and features.hookfunction then
        pcall(function()
            local oldFireServer = safehook(ChatRemote.FireServer, safeprotect(function(self, message, ...)
                if type(message) == "string" then
                    message = AntiChatLog(message)
                end
                return oldFireServer(self, message, ...)
            end))
            showNotification("DD'S ACL", "Legacy chat system protected", 3)
        end)
    end
end

local function blockChatLogAccess()
    if features.hookfunction then
        if TextChatService.GetMessageHistory then
            pcall(function()
                safehook(TextChatService.GetMessageHistory, safeprotect(function()
                    return {}
                end))
                showNotification("DD'S ACL", "Chat history access blocked", 3)
            end)
        else
            showNotification("DD'S ACL", "Chat log protection not needed (modern chat system)", 3)
        end
    end
end

local function initializeProtections()
    if LocalPlayer:FindFirstChild("DDACL_Initialized") then 
        showNotification("DD'S ACL", "Protections already loaded!", 5)
        return 
    end
    
    local marker = Instance.new("BoolValue")
    marker.Name = "DDACL_Initialized"
    marker.Parent = LocalPlayer
    
    showNotification("DD'S ACL", "Initializing protections...", 2)
    
    task.spawn(function()
        applyScreenshotProtection()
        task.wait(0.5)
        protectNewChatSystem()
        task.wait(0.5)
        protectLegacyChat()
        task.wait(0.5)
        
        blockChatLogAccess()
        
        if features.hookfunction then
            pcall(function()
                safehook(Players.ReportAbuse, safeprotect(function(self, player, reason, description)
                    return "Report blocked by DDACL"
                end))
                showNotification("DD'S ACL", "Abuse report protection active", 3)
            end)
        end
        
        showNotification("DD'S ACL", "Protections fully loaded!\nChat & Screenshot secured", 5)
    end)
end

task.spawn(function()
    repeat task.wait() until LocalPlayer and TextChatService
    showNotification("DD'S ACL", "Game fully loaded, starting protections...", 2)
    task.wait(1)
    initializeProtections()
end)

task.spawn(function()
    repeat
        pcall(function() 
            StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true) 
        end)
        task.wait(5)
    until false
end)