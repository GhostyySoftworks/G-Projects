local game = game
local GetService = game.GetService
if (not game.IsLoaded(game)) then
    local Loaded = game.Loaded
    Loaded.Wait(Loaded);
    wait(1.5)
end

local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/FD2Team/archive/main/notificationtest"))();
local Notify = Notification.Notify;

Notify({
        Description = "Have Fun Using DD Admin!";
        Title = "DD";
        Duration = 5;
        
});

local CustomFunctionSupport = isfile and isfolder and writefile and readfile and listfiles
local FileSupport = isfile and isfolder and writefile and readfile

if FileSupport then
if not isfolder('DD-Admin') then
makefolder('DD-Admin')
end

if not isfile("DD-Admin/Prefix.txt") then
writefile("DD-Admin/Prefix.txt", ';')
else
end
end

-- [[ PREFIX AND OTHER STUFF. ]] -- 
local opt = {
    prefix = readfile("DD-Admin/Prefix.txt", ';'),
    tupleSeparator = ',',
    ui = {},
    keybinds = {},
}

-- [[ Version ]] -- 
currentversion = 1.16

--[[ VARIABLES ]]--
PlaceId, JobId = game.PlaceId, game.JobId
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local RunService2 = game:FindService("RunService")
local StarterGui = game:GetService("StarterGui")
local SoundService = game:GetService("SoundService")
sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop
local Player = game.Players.LocalPlayer
local Humanoid = Character and Character:FindFirstChildWhichIsA("Humanoid") or false
local Character = game.Players.LocalPlayer.Character
local Clicked = true
_G.Spam = false
--[[ FOR LOOP COMMANDS ]]--
view = false
Loopvoid = false
local Admin = {}

--[[ Some more variables ]]--

local localPlayer = Players.LocalPlayer
local character = localPlayer.Character
local mouse = localPlayer:GetMouse()
local camera = workspace.CurrentCamera
local camtype = camera.CameraType
local Commands, Aliases = {}, {}
player, plr, lp = localPlayer, localPlayer, localPlayer, localPlayer

localPlayer.CharacterAdded:Connect(function(c)
    character = c
end)

local bringc = {}

--[[ COMMAND FUNCTIONS ]]--
commandcount = 0
cmd = {}
cmd.add = function(...)
    local vars = {...}
    local aliases, info, func = vars[1], vars[2], vars[3]
    for i, cmdName in pairs(aliases) do
        if i == 1 then
            Commands[cmdName:lower()] = {func, info}
        else
            Aliases[cmdName:lower()] = {func, info}
        end
    end
    commandcount = commandcount + 1
end

cmd.run = function(args)
    local caller, arguments = args[1], args; table.remove(args, 1);
    local success, msg = pcall(function()
        if Commands[caller:lower()] then
            Commands[caller:lower()][1](unpack(arguments))
        elseif Aliases[caller:lower()] then
            Aliases[caller:lower()][1](unpack(arguments))
        end
    end)
    if not success then
    end
end

--[[ LIBRARY FUNCTIONS ]]--
lib = {}
lib.wrap = function(f)
    return coroutine.wrap(f)()
end

wrap = lib.wrap

local wait = function(int)
    if not int then int = 0 end
    local t = tick()
    repeat
        RunService.Heartbeat:Wait(0)
    until (tick() - t) >= int
    return (tick() - t), t
end

    function r15(plr)
        if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    function getRoot(character)
    local root = game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart') or game.Players.LocalPlayer.Character:FindFirstChild('Torso') or game.Players.LocalPlayer.Character:FindFirstChild('UpperTorso')
    return root
end

-- [[ FUNCTION TO GET A PLAYER ]] --
local getPlr = function(Name)
    if Name:lower() == "random" then
        return Players:GetPlayers()[math.random(#Players:GetPlayers())]
    else
        Name = Name:lower():gsub("%s", "")
        for _, x in next, Players:GetPlayers() do
            if x.Name:lower():match(Name) then
                return x
            elseif x.DisplayName:lower():match("^" .. Name) then
                return x
            end
        end
    end
end

-- [[ MORE VARIABLES ]] --
plr = game.Players.LocalPlayer
COREGUI = game:GetService("CoreGui")
speaker = game.Players.LocalPlayer
char = plr.Character
RunService = game:GetService("RunService")

game:GetService('RunService').Stepped:connect(function()
if anniblockspam then
game.workspace.Tools.Chest_Invisibility_Cloak.Part.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)

if game.Players.LocalPlayer.Backpack:FindFirstChild("InvisibilityCloak") then
game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack.InvisibilityCloak)
end

for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if (v:IsA("Tool")) then
v.Handle.Mesh:Destroy()
end
end

for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if (v:IsA("Tool")) then
v.Parent = workspace
end
end

end
end)

function x(v)
    if v then
        for _,i in pairs(workspace:GetDescendants()) do
            if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
                i.LocalTransparencyModifier = 0.5
            end
        end
    else
        for _,i in pairs(workspace:GetDescendants()) do
            if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
                i.LocalTransparencyModifier = 0
            end
        end
    end
end

local function getChar()
    return game.Players.LocalPlayer.Character
end

local function getBp()
    return game.Players.LocalPlayer.Backpack
end

local cmdlp = game.Players.LocalPlayer

plr = cmdlp

workspace = game.workspace

cmdm = plr:GetMouse()

local tool = getBp():FindFirstChildOfClass("Tool") or getChar():FindFirstChildOfClass("Tool")

local function attachTool(tool,cf)
    for i,v in pairs(tool:GetDescendants()) do
        if not (v:IsA("BasePart") or v:IsA("Mesh") or v:IsA("SpecialMesh")) then
            v:Destroy()
        end
    end
    wait()
game.Players.LocalPlayer.Character.Humanoid.Name = 1
local l = game.Players.LocalPlayer.Character["1"]:Clone()
l.Parent = game.Players.LocalPlayer.Character
l.Name = "Humanoid"
            
game.Players.LocalPlayer.Character["1"]:Destroy()
game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character.Animate.Disabled = true
wait()
game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"

tool.Parent = getChar()
end

local nc = false
local ncLoop
ncLoop = game:GetService("RunService").Stepped:Connect(function()
    if nc and getChar() ~= nil then
        for _, v in pairs(getChar():GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide == true then
                v.CanCollide = false
            end
        end
    end
end)

local netsleepTargets = {}
local nsLoop
nsLoop = game:GetService("RunService").Stepped:Connect(function()
    if #netsleepTargets == 0 then return end
    for i,v in pairs(netsleepTargets) do
        if v.Character then
            for i,v in pairs(v.Character:GetChildren()) do
                if v:IsA("BasePart") == false and v:IsA("Accessory") == false then continue end
                if v:IsA("BasePart") then
                    sethiddenproperty(v,"NetworkIsSleeping",true)
                elseif v:IsA("Accessory") and v:FindFirstChild("Handle") then
                    sethiddenproperty(v.Handle,"NetworkIsSleeping",true)
                end
            end
        end
    end
end)

function getTorso(x)
    x = x or game.Players.LocalPlayer.Character
    return x:FindFirstChild("Torso") or x:FindFirstChild("UpperTorso") or x:FindFirstChild("LowerTorso") or x:FindFirstChild("HumanoidRootPart")
end

function getRoot(char)
    local rootPart = game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart') or game.Players.LocalPlayer.Character:FindFirstChild('Torso') or game.Players.LocalPlayer.Character:FindFirstChild('UpperTorso')
    return rootPart
end

local lp = game:GetService("Players").LocalPlayer

-- [[ LIB FUNCTIONS ]] --
lib.lock = function(instance, par)
    locks[instance] = true
    instance.Parent = par or instance.Parent
    instance.Name = "RightGrip"
end
lock = lib.lock
locks = {}

lib.find = function(t, v)
    for i, e in pairs(t) do
        if i == v or e == v then
            return i
        end
    end
    return nil
end

lib.parseText = function(text, watch)
    local parsed = {}
    if not text then return nil end
    for arg in text:gmatch("[^" .. watch .. "]+") do
        arg = arg:gsub("-", "%%-")
        local pos = text:find(arg)
        arg = arg:gsub("%%", "")
        if pos then
            local find = text:sub(pos - opt.prefix:len(), pos - 1)
            if (find == opt.prefix and watch == opt.prefix) or watch ~= opt.prefix then
                table.insert(parsed, arg)
            end
        else
            table.insert(parsed, nil)
        end
    end
    return parsed
end

lib.parseCommand = function(text)
    wrap(function()
        local commands = lib.parseText(text, opt.prefix)
        for _, parsed in pairs(commands) do
            local args = {}
            for arg in parsed:gmatch("[^ ]+") do
                table.insert(args, arg)
            end
            cmd.run(args)
        end
    end)
end

local connections = {}

lib.connect = function(name, connection)	-- no :(
    connections[name .. tostring(math.random(1000000, 9999999))] = connection
    return connection
end

lib.disconnect = function(name)
    for title, connection in pairs(connections) do
        if title:find(name) == 1 then
            connection:Disconnect()
        end
    end
end

m = math
rad = m.rad
clamp = m.clamp
sin = m.sin
tan = m.tan
cos = m.cos

--[[ PLAYER FUNCTIONS ]]--
argument = {}
argument.getPlayers = function(str)
    local playerNames, players = lib.parseText(str, opt.tupleSeparator), {}
    for _, arg in pairs(playerNames or {"me"}) do
        arg = arg:lower()
        local playerList = Players:GetPlayers()
        if arg == "me" or arg == nil then
            table.insert(players, localPlayer)
            
        elseif arg == "all" then
            for _, plr in pairs(playerList) do
                table.insert(players, plr)
            end
            
        elseif arg == "others" then
            for _, plr in pairs(playerList) do
                if plr ~= localPlayer then
                    table.insert(players, plr)
                end
            end
            
        elseif arg == "random" then
            table.insert(players, playerList[math.random(1, #playerList)])
            
        elseif arg:find("%%") == 1 then
            local teamName = arg:sub(2)
            for _, plr in pairs(playerList) do
                if tostring(plr.Team):lower():find(teamName) == 1 then
                    table.insert(players, plr)
                end
            end
            
        else
            for _, plr in pairs(playerList) do
                if plr.Name:lower():find(arg) == 1 or (plr.DisplayName and plr.DisplayName:lower():find(arg) == 1) or (tostring(plr.UserId):lower():find(arg) == 1) then
                    table.insert(players, plr)
                end
            end
        end
    end
    return players
end

--[[ COMMANDS ]]--

cmd.add({"fling"}, {"fling <player>", "Fling the given player"}, function(plr)
    local player = game.Players.LocalPlayer
    local mouse = player:GetMouse()
    local Targets = {plr}
    
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    
    local AllBool = false
    
    local GetPlayer = function(Name)
        Name = Name:lower()
        if Name == "all" or Name == "others" then
            AllBool = true
            return
        elseif Name == "random" then
            local GetPlayers = Players:GetPlayers()
            if table.find(GetPlayers,Player) then table.remove(GetPlayers,table.find(GetPlayers,Player)) end
            return GetPlayers[math.random(#GetPlayers)]
        elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
            for _,x in next, Players:GetPlayers() do
                if x ~= Player then
                    if x.Name:lower():match("^"..Name) then
                        return x;
                    elseif x.DisplayName:lower():match("^"..Name) then
                        return x;
                    end
                end
            end
        else
            return
        end
    end
    
    local SkidFling = function(TargetPlayer)
        local Character = Player.Character
        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
        local RootPart = Humanoid and Humanoid.RootPart
    
        local TCharacter = TargetPlayer.Character
        local THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
        local TRootPart = THumanoid and THumanoid.RootPart
        local THead = TCharacter:FindFirstChild("Head")
        local Accessory = TCharacter:FindFirstChildOfClass("Accessory")
        local Handle = Accessory and Accessory:FindFirstChild("Handle")
    
        if Character and Humanoid and RootPart then
            if RootPart.Velocity.Magnitude < 50 then
                getgenv().OldPos = RootPart.CFrame
            end
    
            if THead then
                workspace.CurrentCamera.CameraSubject = THead
            elseif not THead and Handle then
                workspace.CurrentCamera.CameraSubject = Handle
            elseif THumanoid and TRootPart then
                workspace.CurrentCamera.CameraSubject = THumanoid
            end
    
            if not TCharacter:FindFirstChildWhichIsA("BasePart") then
                return
            end
            
            local FPos = function(BasePart, Pos, Ang)
                RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
                Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
                RootPart.Velocity = Vector3.new(9e8, 9e8 * 10, 9e8)
                RootPart.RotVelocity = Vector3.new(9e9, 9e9, 9e9)
            end
            
            local SFBasePart = function(BasePart)
                local TimeToWait = 2
                local Time = tick()
                local Angle = 0
    
                repeat
                    if RootPart and THumanoid then
                        if BasePart.Velocity.Magnitude < 50 then
                            Angle = Angle + 100
                            FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                        else
                            FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                            task.wait()
                        end
                    else
                        break
                    end
                until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or Humanoid.Health <= 0 or tick() > Time + TimeToWait
            end
    
            workspace.FallenPartsDestroyHeight = 0/0
            local BV = Instance.new("BodyVelocity")
            BV.Name = "EpixVel"
            BV.Parent = RootPart
            BV.Velocity = Vector3.new(9e9, 9e9, 9e9)
            BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
    
            if TRootPart and THead then
                if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                    SFBasePart(THead)
                else
                    SFBasePart(TRootPart)
                end
            elseif TRootPart and not THead then
                SFBasePart(TRootPart)
            elseif not TRootPart and THead then
                SFBasePart(THead)
            elseif not TRootPart and not THead and Accessory and Handle then
                SFBasePart(Handle)
            end
    
            BV:Destroy()
            workspace.CurrentCamera.CameraSubject = Humanoid
    
            repeat
                RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
                Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
                Humanoid:ChangeState("GettingUp")
                table.foreach(Character:GetChildren(), function(_, x)
                    if x:IsA("BasePart") then
                        x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                    end
                end)
                task.wait()
            until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
            workspace.FallenPartsDestroyHeight = getgenv().FPDH
        end
    end
    
    if Targets[1] then for _,x in next, Targets do GetPlayer(x) end else return end
    
    if AllBool then
        for _,x in next, Players:GetPlayers() do
            SkidFling(x)
        end
    end
    
    for _,x in next, Targets do
        if GetPlayer(x) and GetPlayer(x) ~= Player then
            if GetPlayer(x).UserId ~= 1414978355 then
                local TPlayer = GetPlayer(x)
                if TPlayer then
                    SkidFling(TPlayer)
                end
            end
        end
    end
end)

cmd.add({"multifling"}, {"multifling <player>", "Fling the given player(s), comma-separated"}, function(plr)
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    local AllBool = false

    -- Parse multiple names
    local Targets = {}
    for name in string.gmatch(plr, "[^,%s]+") do
        table.insert(Targets, name)
    end

    local GetPlayer = function(Name)
        Name = Name:lower()
        if Name == "all" or Name == "others" then
            AllBool = true
            return
        elseif Name == "random" then
            local GetPlayers = Players:GetPlayers()
            if table.find(GetPlayers, Player) then table.remove(GetPlayers, table.find(GetPlayers, Player)) end
            return GetPlayers[math.random(#GetPlayers)]
        else
            for _,x in next, Players:GetPlayers() do
                if x ~= Player then
                    if x.Name:lower():match("^"..Name) or x.DisplayName:lower():match("^"..Name) then
                        return x
                    end
                end
            end
        end
    end

    local SkidFling = function(TargetPlayer)
        local Character = Player.Character
        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
        local RootPart = Humanoid and Humanoid.RootPart

        local TCharacter = TargetPlayer.Character
        local THumanoid = TCharacter and TCharacter:FindFirstChildOfClass("Humanoid")
        local TRootPart = THumanoid and THumanoid.RootPart
        local THead = TCharacter and TCharacter:FindFirstChild("Head")
        local Accessory = TCharacter and TCharacter:FindFirstChildOfClass("Accessory")
        local Handle = Accessory and Accessory:FindFirstChild("Handle")

        if Character and Humanoid and RootPart then
            if RootPart.Velocity.Magnitude < 50 then
                getgenv().OldPos = RootPart.CFrame
            end

            if THead then
                workspace.CurrentCamera.CameraSubject = THead
            elseif Handle then
                workspace.CurrentCamera.CameraSubject = Handle
            elseif THumanoid and TRootPart then
                workspace.CurrentCamera.CameraSubject = THumanoid
            end

            if not TCharacter:FindFirstChildWhichIsA("BasePart") then return end

            local FPos = function(BasePart, Pos, Ang)
                RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
                Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
                RootPart.Velocity = Vector3.new(9e8, 9e8 * 10, 9e8)
                RootPart.RotVelocity = Vector3.new(9e9, 9e9, 9e9)
            end

            local SFBasePart = function(BasePart)
                local TimeToWait = 2
                local Time = tick()
                local Angle = 0

                repeat
                    if RootPart and THumanoid then
                        if BasePart.Velocity.Magnitude < 50 then
                            Angle = Angle + 100
                            FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection, CFrame.Angles(math.rad(Angle), 0, 0))
                            task.wait()
                        else
                            FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                            task.wait()
                            FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                            task.wait()
                        end
                    else
                        break
                    end
                until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or Humanoid.Health <= 0 or tick() > Time + TimeToWait
            end

            workspace.FallenPartsDestroyHeight = 0/0
            local BV = Instance.new("BodyVelocity")
            BV.Name = "EpixVel"
            BV.Parent = RootPart
            BV.Velocity = Vector3.new(9e9, 9e9, 9e9)
            BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)

            if TRootPart and THead then
                if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                    SFBasePart(THead)
                else
                    SFBasePart(TRootPart)
                end
            elseif TRootPart then
                SFBasePart(TRootPart)
            elseif THead then
                SFBasePart(THead)
            elseif Handle then
                SFBasePart(Handle)
            end

            BV:Destroy()
            workspace.CurrentCamera.CameraSubject = Humanoid

            repeat
                RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
                Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
                Humanoid:ChangeState("GettingUp")
                for _, x in pairs(Character:GetChildren()) do
                    if x:IsA("BasePart") then
                        x.Velocity = Vector3.zero
                        x.RotVelocity = Vector3.zero
                    end
                end
                task.wait()
            until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
            workspace.FallenPartsDestroyHeight = getgenv().FPDH
        end
    end

    -- Run fling logic
    if #Targets == 0 then return end

    if AllBool then
        for _,x in next, Players:GetPlayers() do
            if x ~= Player then
                SkidFling(x)
            end
        end
    else
        for _,name in next, Targets do
            local TPlayer = GetPlayer(name)
            if TPlayer and TPlayer ~= Player and TPlayer.UserId ~= 1414978355 then
                SkidFling(TPlayer)
            end
        end
    end
end)

cmd.add({"loopfling"}, {"loopfling <player>", "Continuously fling a player"}, function(plr)
    local Targets = {plr}
    
    Loopvoid = true
    repeat wait()
        local player = game.Players.LocalPlayer
        local mouse = player:GetMouse()
        
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        
        local AllBool = false
        
        local GetPlayer = function(Name)
            Name = Name:lower()
            if Name == "all" or Name == "others" then
                AllBool = true
                return
            elseif Name == "random" then
                local GetPlayers = Players:GetPlayers()
                if table.find(GetPlayers,Player) then table.remove(GetPlayers,table.find(GetPlayers,Player)) end
                return GetPlayers[math.random(#GetPlayers)]
            elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
                for _,x in next, Players:GetPlayers() do
                    if x ~= Player then
                        if x.Name:lower():match("^"..Name) then
                            return x;
                        elseif x.DisplayName:lower():match("^"..Name) then
                            return x;
                        end
                    end
                end
            else
                return
            end
        end
        
        local SkidFling = function(TargetPlayer)
            local Character = Player.Character
            local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
            local RootPart = Humanoid and Humanoid.RootPart
        
            local TCharacter = TargetPlayer.Character
            local THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
            local TRootPart = THumanoid and THumanoid.RootPart
            local THead = TCharacter:FindFirstChild("Head")
            local Accessory = TCharacter:FindFirstChildOfClass("Accessory")
            local Handle = Accessory and Accessory:FindFirstChild("Handle")
        
            if Character and Humanoid and RootPart then
                if RootPart.Velocity.Magnitude < 50 then
                    getgenv().OldPos = RootPart.CFrame
                end
        
                if THead then
                    workspace.CurrentCamera.CameraSubject = THead
                elseif not THead and Handle then
                    workspace.CurrentCamera.CameraSubject = Handle
                elseif THumanoid and TRootPart then
                    workspace.CurrentCamera.CameraSubject = THumanoid
                end
        
                if not TCharacter:FindFirstChildWhichIsA("BasePart") then
                    return
                end
                
                local FPos = function(BasePart, Pos, Ang)
                    RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
                    Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
                    RootPart.Velocity = Vector3.new(9e8, 9e8 * 10, 9e8)
                    RootPart.RotVelocity = Vector3.new(9e9, 9e9, 9e9)
                end
                
                local SFBasePart = function(BasePart)
                    local TimeToWait = 2
                    local Time = tick()
                    local Angle = 0
        
                    repeat
                        if RootPart and THumanoid then
                            if BasePart.Velocity.Magnitude < 50 then
                                Angle = Angle + 100
                                FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                                task.wait()
                            else
                                FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                                task.wait()
                                FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                                task.wait()
                            end
                        else
                            break
                        end
                    until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or Humanoid.Health <= 0 or tick() > Time + TimeToWait
                end
                
                workspace.FallenPartsDestroyHeight = 0/0
                local BV = Instance.new("BodyVelocity")
                BV.Name = "EpixVel"
                BV.Parent = RootPart
                BV.Velocity = Vector3.new(9e9, 9e9, 9e9)
                BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
                
                if TRootPart and THead then
                    if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                        SFBasePart(THead)
                    else
                        SFBasePart(TRootPart)
                    end
                elseif TRootPart and not THead then
                    SFBasePart(TRootPart)
                elseif not TRootPart and THead then
                    SFBasePart(THead)
                elseif not TRootPart and not THead and Accessory and Handle then
                    SFBasePart(Handle)
                end
                
                BV:Destroy()
                workspace.CurrentCamera.CameraSubject = Humanoid
                
                repeat
                    RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
                    Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
                    Humanoid:ChangeState("GettingUp")
                    table.foreach(Character:GetChildren(), function(_, x)
                        if x:IsA("BasePart") then
                            x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                        end
                    end)
                    task.wait()
                until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
                workspace.FallenPartsDestroyHeight = getgenv().FPDH
            end
        end
        
        if Targets[1] then for _,x in next, Targets do GetPlayer(x) end else return end
        
        if AllBool then
            for _,x in next, Players:GetPlayers() do
                SkidFling(x)
            end
        end
        
        for _,x in next, Targets do
            if GetPlayer(x) and GetPlayer(x) ~= Player then
                if GetPlayer(x).UserId ~= 1414978355 then
                    local TPlayer = GetPlayer(x)
                    if TPlayer then
                        SkidFling(TPlayer)
                    end
                end
            end
        end
    until Loopvoid == false
end)

cmd.add({"unloopfling"}, {"unloopfling", "Stops loop flinging a player"}, function(...)
 Loopvoid = false
end)

--[[ FUNCTIONALITY ]]--
localPlayer.Chatted:Connect(function(str)
    lib.parseCommand(str)
end)

-- [[ Admin Player]]
function AdminChatted(Message, Player)
    Player.Chatted:Connect(function(Message, Player)
        lib.parseCommand(Message, Player)
    end)
end

function CheckPermissions(Player)
    Player.Chatted:Connect(function(Message)
        if Admin[Player.UserId] then
            AdminChatted(Message, Player)
        end
    end)
end
Players.PlayerAdded:Connect(function(Player)
    CheckPermissions(Player)
end)
for i,v in pairs(Players:GetPlayers()) do
    if v ~= LocalPlayer then
        CheckPermissions(v)
    end
end


--[[ GUI VARIABLES ]]--
local ScreenGui
if not RunService:IsStudio() then
    ScreenGui = game:GetObjects("rbxassetid://13510552309")[1]
else
    repeat wait() until player:FindFirstChild("AdminUI", true)
    ScreenGui = player:FindFirstChild("AdminUI", true)
end

local description = ScreenGui.Description
local cmdBar = ScreenGui.CmdBar
    local centerBar = cmdBar.CenterBar
        local cmdInput = centerBar.Input
    local cmdAutofill = cmdBar.Autofill
        local cmdExample = cmdAutofill.Cmd
    local leftFill = cmdBar.LeftFill
    local rightFill = cmdBar.RightFill
local chatLogsFrame = ScreenGui.ChatLogs
    local chatLogs = chatLogsFrame.Container.Logs
        local chatExample = chatLogs.TextLabel
local commandsFrame = ScreenGui.Commands
    local commandsFilter = commandsFrame.Container.Filter
    local commandsList = commandsFrame.Container.List
        local commandExample = commandsList.TextLabel
local resizeFrame = ScreenGui.Resizeable
local resizeXY = {
    Top		= {Vector2.new(0, -1),	Vector2.new(0, -1),	"rbxassetid://2911850935"},
    Bottom	= {Vector2.new(0, 1),	Vector2.new(0, 0),	"rbxassetid://2911850935"},
    Left	= {Vector2.new(-1, 0),	Vector2.new(1, 0),	"rbxassetid://2911851464"},
    Right	= {Vector2.new(1, 0),	Vector2.new(0, 0),	"rbxassetid://2911851464"},
    
    TopLeft		= {Vector2.new(-1, -1),	Vector2.new(1, -1),	"rbxassetid://2911852219"},
    TopRight	= {Vector2.new(1, -1),	Vector2.new(0, -1),	"rbxassetid://2911851859"},
    BottomLeft	= {Vector2.new(-1, 1),	Vector2.new(1, 0),	"rbxassetid://2911851859"},
    BottomRight	= {Vector2.new(1, 1),	Vector2.new(0, 0),	"rbxassetid://2911852219"},
}

cmdExample.Parent = nil
chatExample.Parent = nil
commandExample.Parent = nil
resizeFrame.Parent = nil

local rPlayer = Players:FindFirstChildWhichIsA("Player")
local coreGuiProtection = {}

pcall(function()
    for i, v in pairs(ScreenGui:GetDescendants()) do
        coreGuiProtection[v] = rPlayer.Name
    end
    ScreenGui.DescendantAdded:Connect(function(v)
        coreGuiProtection[v] = rPlayer.Name
    end)
    coreGuiProtection[ScreenGui] = rPlayer.Name
     
    local meta = getrawmetatable(game)
    local tostr = meta.__tostring
    setreadonly(meta, false)
    meta.__tostring = newcclosure(function(t)
        if coreGuiProtection[t] and not checkcaller() then
            return coreGuiProtection[t]
        end
        return tostr(t)
    end)
end)

if not RunService:IsStudio() then
    local newGui = game:GetService("CoreGui"):FindFirstChildWhichIsA("ScreenGui")
    newGui.DescendantAdded:Connect(function(v)
        coreGuiProtection[v] = rPlayer.Name
    end)
    for i, v in pairs(ScreenGui:GetChildren()) do
        v.Parent = newGui
    end
    ScreenGui = newGui
end

--[[ GUI FUNCTIONS ]]--
gui = {}
gui.txtSize = function(ui, x, y)
    local textService = game:GetService("TextService")
    return textService:GetTextSize(ui.Text, ui.TextSize, ui.Font, Vector2.new(x, y))
end
gui.commands = function()
    if not commandsFrame.Visible then
        commandsFrame.Visible = true
        commandsList.CanvasSize = UDim2.new(0, 0, 0, 0)
    end
    for i, v in pairs(commandsList:GetChildren()) do
        if v:IsA("TextLabel") then
            Destroy(v)
        end
    end
    local i = 0
    for cmdName, tbl in pairs(Commands) do
        local Cmd = commandExample:Clone()
        Cmd.Parent = commandsList
        Cmd.Name = cmdName
        Cmd.Text = " " .. tbl[2][1]
        Cmd.MouseEnter:Connect(function()
            description.Visible = true
            description.Text = tbl[2][2]
        end)
        Cmd.MouseLeave:Connect(function()
            if description.Text == tbl[2][2] then
                description.Visible = false
                description.Text = ""
            end
        end)
        i = i + 1
    end
    commandsList.CanvasSize = UDim2.new(0, 0, 0, i*20+10)
    commandsFrame.Position = UDim2.new(0.5, -283/2, 0.5, -260/2)
end
gui.chatlogs = function()
    if not chatLogsFrame.Visible then
        chatLogsFrame.Visible = true
    end
    chatLogsFrame.Position = UDim2.new(0.5, -283/2+5, 0.5, -260/2+5)
end

gui.tween = function(obj, style, direction, duration, goal)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle[style], Enum.EasingDirection[direction])
    local tween = TweenService:Create(obj, tweenInfo, goal)
    tween:Play()
    return tween
end
gui.mouseIn = function(guiObject, range)
    local pos1, pos2 = guiObject.AbsolutePosition, guiObject.AbsolutePosition + guiObject.AbsoluteSize
    local mX, mY = mouse.X, mouse.Y
    if mX > pos1.X-range and mX < pos2.X+range and mY > pos1.Y-range and mY < pos2.Y+range then
        return true
    end
    return false
end
gui.resizeable = function(ui, min, max)
    local rgui = resizeFrame:Clone()
    rgui.Parent = ui
    
    local mode
    local UIPos
    local lastSize
    local lastPos = Vector2.new()
    
    local function update(delta)
        local xy = resizeXY[(mode and mode.Name) or '']
        if not mode or not xy then return end
        local delta = (delta * xy[1]) or Vector2.new()
        local newSize = Vector2.new(lastSize.X + delta.X, lastSize.Y + delta.Y)
        newSize = Vector2.new(
            math.clamp(newSize.X, min.X, max.X),
            math.clamp(newSize.Y, min.Y, max.Y)
        )
        ui.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
        ui.Position = UDim2.new(
            UIPos.X.Scale, 
            UIPos.X.Offset + (-(newSize.X - lastSize.X) * xy[2]).X, 
            UIPos.Y.Scale, 
            UIPos.Y.Offset + (delta * xy[2]).Y
        )
    end
    
    mouse.Move:Connect(function()
        update(Vector2.new(mouse.X, mouse.Y) - lastPos)
    end)
    
    for _, button in pairs(rgui:GetChildren()) do
        local isIn = false
        button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                mode = button
                lastPos = Vector2.new(mouse.X, mouse.Y)
                lastSize = ui.AbsoluteSize
                UIPos = ui.Position
            end
        end)
        button.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                mode = nil
            end
        end)
        button.MouseEnter:Connect(function()
            mouse.Icon = resizeXY[button.Name][3]
        end)
        button.MouseLeave:Connect(function()
            if mouse.Icon == resizeXY[button.Name][3] then
                mouse.Icon = ""
            end
        end)
    end
end
gui.draggable = function(ui, dragui)
    if not dragui then dragui = ui end
    local UserInputService = game:GetService("UserInputService")
    
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        ui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    dragui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = ui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end
gui.menuify = function(menu)
    local exit = menu:FindFirstChild("Exit", true)
    local mini = menu:FindFirstChild("Minimize", true)
    local minimized = false
    local sizeX, sizeY = Instance.new("IntValue", menu), Instance.new("IntValue", menu)
    mini.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            sizeX.Value = menu.Size.X.Offset
            sizeY.Value = menu.Size.Y.Offset
            gui.tween(menu, "Quart", "Out", 0.5, {Size = UDim2.new(0, 283, 0, 25)})
        else
            gui.tween(menu, "Quart", "Out", 0.5, {Size = UDim2.new(0, sizeX.Value, 0, sizeY.Value)})
        end
    end)
    exit.MouseButton1Click:Connect(function()
        menu.Visible = false
    end)
    gui.draggable(menu, menu.Topbar)
    menu.Visible = false
end


gui.loadCommands = function()
   for i, v in pairs(cmdAutofill:GetChildren()) do
       if v.Name ~= "UIListLayout" then
           Destroy(v)
       end
   end
   local last = nil
   local i = 0
   for name, tbl in pairs(Commands) do
       local info = tbl[2]
       local btn = cmdExample:Clone()
       btn.Parent = cmdAutofill
       btn.Name = name
       btn.Input.Text = info[1]
       i = i + 1
       
       local size = btn.Size
       btn.Size = UDim2.new(0, 0, 0, 25)
       btn.Size = size
   end
end

    gui.loadCommands()
 for i, v in ipairs(cmdAutofill:GetChildren()) do
        if v:IsA("Frame") then
            v.Visible = false
        end
    end
gui.barSelect = function(speed)
    centerBar.Visible = true
    gui.tween(centerBar, "Sine", "Out", speed or 0.25, {Size = UDim2.new(0, 250, 1, 15)})
    gui.tween(leftFill, "Quad", "Out", speed or 0.3, {Position = UDim2.new(0, 0, 0.5, 0)})
    gui.tween(rightFill, "Quad", "Out", speed or 0.3, {Position = UDim2.new(1, 0, 0.5, 0)})
end
gui.barDeselect = function(speed)
    gui.tween(centerBar, "Sine", "Out", speed or 0.25, {Size = UDim2.new(0, 250, 0, 0)})
    gui.tween(leftFill, "Sine", "In", speed or 0.3, {Position = UDim2.new(-0.5, 100, 0.5, 0)})
    gui.tween(rightFill, "Sine", "In", speed or 0.3, {Position = UDim2.new(1.5, -100, 0.5, 0)})
    for i, v in ipairs(cmdAutofill:GetChildren()) do
        if v:IsA("Frame") then
            wrap(function()
                wait(math.random(1, 200)/2000)
                gui.tween(v, "Back", "In", 0.35, {Size = UDim2.new(0, 0, 0, 25)})
            end)
        end
   end
end

-- [[ AUTOFILL SEARCHER ]] --
gui.searchCommands = function()
   local str = (cmdInput.Text:gsub(";", "")):lower()
   local index = 0
   local lastFrame
   for _, v in ipairs(cmdAutofill:GetChildren()) do
       if v:IsA("Frame") and index < 5 then
           local cmd = Commands[v.Name]
           local name = cmd and cmd[2][1] or ""
           v.Input.Text = str ~= "" and v.Name:find(str) == 1 and v.Name or name
           v.Visible = str == "" or v.Name:find(str)
           if v.Visible then
               index = index + 1
               local n = math.sqrt(index) * 125
               local yPos = (index - 1) * 28
               local newPos = UDim2.new(0.5, 0, 0, yPos)
               gui.tween(v, "Quint", "Out", 0.3, {
                   Size = UDim2.new(0.5, n, 0, 25),
                   Position = lastFrame and newPos or UDim2.new(0.5, 0, 0, yPos),
               })
               lastFrame = v
           end
       end
   end
end

--[[ GUI FUNCTIONALITY ]]--

-- [[ OPEN THE COMMAND BAR ]] -- 
mouse.KeyDown:Connect(function(k)
    if k:lower() == opt.prefix then
        gui.barSelect()
        cmdInput.Text = ''
        cmdInput:CaptureFocus()
                wait(0.00005)
                            cmdInput.Text = ''
    end
end)

-- [[ CLOSE THE COMMAND BAR ]] -- 
cmdInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        wrap(function()
            lib.parseCommand(opt.prefix .. cmdInput.Text)
        end)
    end
    gui.barDeselect()
    end)

cmdInput.Changed:Connect(function(p)
    if p ~= "Text" then return end
    gui.searchCommands()
end)

gui.barDeselect(0)
cmdBar.Visible = true
gui.menuify(chatLogsFrame)
gui.menuify(commandsFrame)

-- [[ GUI RESIZE FUNCTION ]] -- 

-- table.find({Enum.Platform.IOS, Enum.Platform.Android}, game:GetService("UserInputService"):GetPlatform()) | searches if the player is on mobile.
if table.find({Enum.Platform.IOS, Enum.Platform.Android}, game:GetService("UserInputService"):GetPlatform()) then 
else
gui.resizeable(chatLogsFrame, Vector2.new(173,58), Vector2.new(1000,1000))
gui.resizeable(commandsFrame, Vector2.new(184,84), Vector2.new(1000,1000))
end

-- [[ CMDS COMMANDS SEARCH FUNCTION ]] --
commandsFilter.Changed:Connect(function(p)
    if p ~= "Text" then return end
    for i, v in pairs(commandsList:GetChildren()) do
        if v:IsA("TextLabel") then
            if v.Name:find(commandsFilter.Text:lower()) and v.Name:find(commandsFilter.Text:lower()) <= 2 then
                v.Visible = true
            else
                v.Visible = false
            end
        end
    end
end)

-- [[ CHAT TO USE COMMANDS ]] --
local function bindToChat(plr, msg)
    local chatMsg = chatExample:Clone()
    for i, v in pairs(chatLogs:GetChildren()) do
        if v:IsA("TextLabel") then
            v.LayoutOrder = v.LayoutOrder + 1
        end
    end
    chatMsg.Parent = chatLogs
    chatMsg.Text = ("[%s]: %s"):format(plr.Name, msg)
    
    local txtSize = gui.txtSize(chatMsg, chatMsg.AbsoluteSize.X, 100)
    chatMsg.Size = UDim2.new(1, -5, 0, txtSize.Y)
end

for i, plr in pairs(Players:GetPlayers()) do
    plr.Chatted:Connect(function(msg)
        bindToChat(plr, msg)
    end)
end
Players.PlayerAdded:Connect(function(plr)
    plr.Chatted:Connect(function(msg)
        bindToChat(plr, msg)
    end)
end)

mouse.Move:Connect(function()
    description.Position = UDim2.new(0, mouse.X, 0, mouse.Y)
    local size = gui.txtSize(description, 200, 100)
    description.Size = UDim2.new(0, size.X, 0, size.Y)
end)

RunService.Stepped:Connect(function()
    chatLogs.CanvasSize = UDim2.new(0, 0, 0, chatLogs.UIListLayout.AbsoluteContentSize.Y)
    commandsList.CanvasSize = UDim2.new(0, 0, 0, commandsList.UIListLayout.AbsoluteContentSize.Y)
end)

function Destroy(guiObject)
    if not pcall(function()guiObject.Parent = game:GetService("CoreGui")end) then
        guiObject.Parent = nil
    end
end

wait(0.2)

-- [[ COMMAND BAR BUTTON ]] --
local ScreenGui = Instance.new("ScreenGui")
local TextClickButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = true

TextClickButton.Name = "DDAdminButton"
TextClickButton.Parent = ScreenGui
TextClickButton.BackgroundColor3 = Color3.fromRGB(4, 4, 4)
TextClickButton.BackgroundTransparency = 1.000
TextClickButton.Position = UDim2.new(0.418, 0,0, 0)
TextClickButton.Size = UDim2.new(0, 2, 0, 33)
TextClickButton.Font = Enum.Font.SourceSansBold
TextClickButton.Text = "DD Admin " .. currentversion .. ""
TextClickButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextClickButton.TextSize = 20.000
TextClickButton.TextScaled = true
TextClickButton.TextWrapped = true

UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = TextClickButton

local function PZORYLB_fake_script()
    local script = Instance.new('LocalScript', TextClickButton)
    textclickbutton = script.Parent
    textclickbutton.Size = UDim2.new(0, 2,0, 33)
    textclickbutton.BackgroundTransparency = 0.14
    textclickbutton:TweenSize(UDim2.new(0, 251,0, 33), "Out", "Quint",1,true)
    wait(2)
    textclickbutton:TweenSize(UDim2.new(0, 32, 0, 33), "Out", "Quint",1,true)
    textclickbutton:TweenPosition(UDim2.new(0.48909232, 0, 0, 0), "Out", "Quint",1,true)
    wait(0.4)
    textclickbutton.Text = "DD"
    textclickbutton.Active = true
gui.draggable(textclickbutton)
end
coroutine.wrap(PZORYLB_fake_script)()

TextClickButton.MouseButton1Click:Connect(function()
    gui.barSelect()
        cmdInput.Text = ''
        cmdInput:CaptureFocus()
end)