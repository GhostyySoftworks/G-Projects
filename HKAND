local game = game
local GetService = game.GetService
if (not game.IsLoaded(game)) then
    local Loaded = game.Loaded
    Loaded.Wait(Loaded);
    wait(1.5)
end

-- Notification library
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/FD2Team/archive/main/notificationtest"))();
local Notify = Notification.Notify;

Notify({
        Description = "Happy Kill A Nigger Day!";
        Title = "HKAND";
        Duration = 5;
        
});

local CustomFunctionSupport = isfile and isfolder and writefile and readfile and listfiles
local FileSupport = isfile and isfolder and writefile and readfile

if FileSupport then
if not isfolder('HKAND-Admin') then
makefolder('HKAND-Admin')
end

if not isfile("HKAND-Admin/Prefix.txt") then
writefile("HKAND-Admin/Prefix.txt", ';')
else
end
end

-- [[ PREFIX AND OTHER STUFF. ]] -- 
local opt = {
    prefix = readfile("HKAND-Admin/Prefix.txt", ';'), -- If player's executor has the custom file function support it reads the prefix file to get prefix
    tupleSeparator = ',',	-- ;ff me,others,all | ;ff me/others/all
    ui = {					-- never did anything with this
        
    },
    keybinds = {			-- never did anything with this
        
    },
}

-- [[ Version ]] -- 
currentversion = 1.16

--[[ VARIABLES ]]--
PlaceId, JobId = game.PlaceId, game.JobId
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local RunService2 = game:FindService("RunService")
local StarterGui = game:GetService("StarterGui")
local SoundService = game:GetService("SoundService")
sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop
local Player = game.Players.LocalPlayer
local IYLOADED = false -- This is used for the ;iy command that executes infinite yield commands using this admin command script (BTW)
local Humanoid = Character and Character:FindFirstChildWhichIsA("Humanoid") or false
local Character = game.Players.LocalPlayer.Character
local Clicked = true
_G.Spam = false
--[[ FOR LOOP COMMANDS ]]--
view = false
anniblockspam = false
control = false
Loopstand = false
Watch = false
local Admin = {}

--[[ COMMAND FUNCTIONS ]]--
commandcount = 0
cmd = {}
cmd.add = function(...)
    local vars = {...}
    local aliases, info, func = vars[1], vars[2], vars[3]
    for i, cmdName in pairs(aliases) do
        if i == 1 then
            Commands[cmdName:lower()] = {func, info}
        else
            Aliases[cmdName:lower()] = {func, info}
        end
    end
    commandcount = commandcount + 1
end

cmd.run = function(args)
    local caller, arguments = args[1], args; table.remove(args, 1);
    local success, msg = pcall(function()
        if Commands[caller:lower()] then
            Commands[caller:lower()][1](unpack(arguments))
        elseif Aliases[caller:lower()] then
            Aliases[caller:lower()][1](unpack(arguments))
        end
    end)
    if not success then
    end
end

--[[ LIBRARY FUNCTIONS ]]--
lib = {}
lib.wrap = function(f)
    return coroutine.wrap(f)()
end

wrap = lib.wrap

local wait = function(int)
    if not int then int = 0 end
    local t = tick()
    repeat
        RunService.Heartbeat:Wait(0)
    until (tick() - t) >= int
    return (tick() - t), t
end

    function r15(plr)
        if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
            return true
        end
    end
    
    function getRoot(character)
    local root = game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart') or game.Players.LocalPlayer.Character:FindFirstChild('Torso') or game.Players.LocalPlayer.Character:FindFirstChild('UpperTorso')
    return root
end

-- [[ FUNCTION TO GET A PLAYER ]] --
local getPlr = function(Name)
    if Name:lower() == "random" then
        return Players:GetPlayers()[math.random(#Players:GetPlayers())]
    else
        Name = Name:lower():gsub("%s", "")
        for _, x in next, Players:GetPlayers() do
            if x.Name:lower():match(Name) then
                return x
            elseif x.DisplayName:lower():match("^" .. Name) then
                return x
            end
        end
    end
end

-- [[ MORE VARIABLES ]] --
plr = game.Players.LocalPlayer
COREGUI = game:GetService("CoreGui")
speaker = game.Players.LocalPlayer
char = plr.Character
RunService = game:GetService("RunService")

game:GetService('RunService').Stepped:connect(function()
if anniblockspam then
game.workspace.Tools.Chest_Invisibility_Cloak.Part.CFrame = CFrame.new(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)

if game.Players.LocalPlayer.Backpack:FindFirstChild("InvisibilityCloak") then
game.Players.LocalPlayer.Character.Humanoid:EquipTool(game.Players.LocalPlayer.Backpack.InvisibilityCloak)
end

for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if (v:IsA("Tool")) then
v.Handle.Mesh:Destroy()
end
end

for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if (v:IsA("Tool")) then
v.Parent = workspace
end
end

end
end)

function mobilefly(speed)
    local controlModule = require(game.Players.LocalPlayer.PlayerScripts:WaitForChild('PlayerModule'):WaitForChild("ControlModule"))
    local bv = Instance.new("BodyVelocity")
    bv.Name = "VelocityHandler"
    bv.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
    bv.MaxForce = Vector3.new(0,0,0)
    bv.Velocity = Vector3.new(0,0,0)
    
    local bg = Instance.new("BodyGyro")
    bg.Name = "GyroHandler"
    bg.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart
    bg.MaxTorque = Vector3.new(9e9,9e9,9e9)
    bg.P = 1000
    bg.D = 50
    
    local Signal1
    Signal1 = game.Players.LocalPlayer.CharacterAdded:Connect(function(NewChar)
    local bv = Instance.new("BodyVelocity")
    bv.Name = "VelocityHandler"
    bv.Parent = NewChar:WaitForChild("Humanoid").RootPart
    bv.MaxForce = Vector3.new(0,0,0)
    bv.Velocity = Vector3.new(0,0,0)
    
    local bg = Instance.new("BodyGyro")
    bg.Name = "GyroHandler"
    bg.Parent = NewChar:WaitForChild("Humanoid").HumanoidRootPart
    bg.MaxTorque = Vector3.new(9e9,9e9,9e9)
    bg.P = 1000
    bg.D = 50
    end)
    
    local camera = game.Workspace.CurrentCamera
    
    local Signal2
    Signal2 = game:GetService"RunService".RenderStepped:Connect(function()
    if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid") and game.Players.LocalPlayer.Character.Humanoid.RootPart and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("VelocityHandler") and game.Players.LocalPlayer.Character.HumanoidRootPart:FindFirstChild("GyroHandler") then
    
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.MaxForce = Vector3.new(9e9,9e9,9e9)
    game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.MaxTorque = Vector3.new(9e9,9e9,9e9)
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = true
    
    game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler.CFrame = camera.CoordinateFrame
    local direction = controlModule:GetMoveVector()
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = Vector3.new()
    if direction.X > 0 then
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + camera.CFrame.RightVector*(direction.X*speed)
    end
    if direction.X < 0 then
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity + camera.CFrame.RightVector*(direction.X*speed)
    end
    if direction.Z > 0 then
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - camera.CFrame.LookVector*(direction.Z*speed)
    end
    if direction.Z < 0 then
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity = game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler.Velocity - camera.CFrame.LookVector*(direction.Z*speed)
    end
    end
    end)
end

function unmobilefly()
    game.Players.LocalPlayer.Character.HumanoidRootPart.VelocityHandler:Destroy()
    game.Players.LocalPlayer.Character.HumanoidRootPart.GyroHandler:Destroy()
    game.Players.LocalPlayer.Character.Humanoid.PlatformStand = false
    Signal1:Disconnect()
    Signal2:Disconnect()
end

function x(v)
    if v then
        for _,i in pairs(workspace:GetDescendants()) do
            if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
                i.LocalTransparencyModifier = 0.5
            end
        end
    else
        for _,i in pairs(workspace:GetDescendants()) do
            if i:IsA("BasePart") and not i.Parent:FindFirstChild("Humanoid") and not i.Parent.Parent:FindFirstChild("Humanoid") then
                i.LocalTransparencyModifier = 0
            end
        end
    end
end

local function getChar()
    return game.Players.LocalPlayer.Character
end

local function getBp()
    return game.Players.LocalPlayer.Backpack
end

local cmdlp = game.Players.LocalPlayer

plr = cmdlp

workspace = game.workspace

cmdm = plr:GetMouse()

function sFLY(vfly)
    FLYING = false
    speedofthefly = 10
    speedofthevfly = 10
    while not cmdlp or not cmdlp.Character or not cmdlp.Character:FindFirstChild('HumanoidRootPart') or not cmdlp.Character:FindFirstChild('Humanoid') or not cmdm do
         wait()
    end 
    local T = cmdlp.Character.HumanoidRootPart
    local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
    local SPEED = 0
    local function FLY()
        FLYING = true
        local BG = Instance.new('BodyGyro', T)
        local BV = Instance.new('BodyVelocity', T)
        BG.P = 9e4
        BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
        BG.cframe = T.CFrame
        BV.velocity = Vector3.new(0, 0, 0)
        BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
        spawn(function()
            while FLYING do
                if not vfly then
                    cmdlp.Character:FindFirstChild("Humanoid").PlatformStand = true
                end
                if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
                    SPEED = 50
                elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
                    SPEED = 0
                end
                if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
                    BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                    lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
                elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
                    BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
                else
                    BV.velocity = Vector3.new(0, 0, 0)
                end
                BG.cframe = workspace.CurrentCamera.CoordinateFrame
                wait()
            end
            CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
            SPEED = 0
            BG:destroy()
            BV:destroy()
            cmdlp.Character.Humanoid.PlatformStand = false
        end)
    end
    cmdm.KeyDown:connect(function(KEY)
        if KEY:lower() == 'w' then
            if vfly then
                CONTROL.F = speedofthevfly
            else
                CONTROL.F = speedofthefly
            end
        elseif KEY:lower() == 's' then
            if vfly then
                CONTROL.B = - speedofthevfly
            else
                CONTROL.B = - speedofthefly
            end
        elseif KEY:lower() == 'a' then
            if vfly then
                CONTROL.L = - speedofthevfly
            else
                CONTROL.L = - speedofthefly
            end
        elseif KEY:lower() == 'd' then
            if vfly then
                CONTROL.R = speedofthevfly
            else
                CONTROL.R = speedofthefly
            end
        elseif KEY:lower() == 'y' then
            if vfly then
                CONTROL.Q = speedofthevfly*2
            else
                CONTROL.Q = speedofthefly*2
            end
        elseif KEY:lower() == 't' then
            if vfly then
                CONTROL.E = -speedofthevfly*2
            else
                CONTROL.E = -speedofthefly*2
            end
        end
    end)
    cmdm.KeyUp:connect(function(KEY)
        if KEY:lower() == 'w' then
            CONTROL.F = 0
        elseif KEY:lower() == 's' then
            CONTROL.B = 0
        elseif KEY:lower() == 'a' then
            CONTROL.L = 0
        elseif KEY:lower() == 'd' then
            CONTROL.R = 0
        elseif KEY:lower() == 'y' then
            CONTROL.Q = 0
        elseif KEY:lower() == 't' then
            CONTROL.E = 0
        end
    end)
    FLY()
end


local tool = getBp():FindFirstChildOfClass("Tool") or getChar():FindFirstChildOfClass("Tool")

local function attachTool(tool,cf)
    for i,v in pairs(tool:GetDescendants()) do
        if not (v:IsA("BasePart") or v:IsA("Mesh") or v:IsA("SpecialMesh")) then
            v:Destroy()
        end
    end
    wait()
game.Players.LocalPlayer.Character.Humanoid.Name = 1
local l = game.Players.LocalPlayer.Character["1"]:Clone()
l.Parent = game.Players.LocalPlayer.Character
l.Name = "Humanoid"
            
game.Players.LocalPlayer.Character["1"]:Destroy()
game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character
game.Players.LocalPlayer.Character.Animate.Disabled = true
wait()
game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"

tool.Parent = getChar()
end

local nc = false
local ncLoop
ncLoop = game:GetService("RunService").Stepped:Connect(function()
    if nc and getChar() ~= nil then
        for _, v in pairs(getChar():GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide == true then
                v.CanCollide = false
            end
        end
    end
end)

local netsleepTargets = {}
local nsLoop
nsLoop = game:GetService("RunService").Stepped:Connect(function()
    if #netsleepTargets == 0 then return end
    for i,v in pairs(netsleepTargets) do
        if v.Character then
            for i,v in pairs(v.Character:GetChildren()) do
                if v:IsA("BasePart") == false and v:IsA("Accessory") == false then continue end
                if v:IsA("BasePart") then
                    sethiddenproperty(v,"NetworkIsSleeping",true)
                elseif v:IsA("Accessory") and v:FindFirstChild("Handle") then
                    sethiddenproperty(v.Handle,"NetworkIsSleeping",true)
                end
            end
        end
    end
end)

function getTorso(x)
    x = x or game.Players.LocalPlayer.Character
    return x:FindFirstChild("Torso") or x:FindFirstChild("UpperTorso") or x:FindFirstChild("LowerTorso") or x:FindFirstChild("HumanoidRootPart")
end

function getRoot(char)
    local rootPart = game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart') or game.Players.LocalPlayer.Character:FindFirstChild('Torso') or game.Players.LocalPlayer.Character:FindFirstChild('UpperTorso')
    return rootPart
end

local lp = game:GetService("Players").LocalPlayer


-- [[ LIB FUNCTIONS ]] --
lib.lock = function(instance, par)
    locks[instance] = true
    instance.Parent = par or instance.Parent
    instance.Name = "RightGrip"
end
lock = lib.lock
locks = {}

lib.find = function(t, v)	-- mmmmmm
    for i, e in pairs(t) do
        if i == v or e == v then
            return i
        end
    end
    return nil
end

lib.parseText = function(text, watch)
    local parsed = {}
    if not text then return nil end
    for arg in text:gmatch("[^" .. watch .. "]+") do
        arg = arg:gsub("-", "%%-")
        local pos = text:find(arg)
        arg = arg:gsub("%%", "")
        if pos then
            local find = text:sub(pos - opt.prefix:len(), pos - 1)
            if (find == opt.prefix and watch == opt.prefix) or watch ~= opt.prefix then
                table.insert(parsed, arg)
            end
        else
            table.insert(parsed, nil)
        end
    end
    return parsed
end

lib.parseCommand = function(text)
    wrap(function()
        local commands = lib.parseText(text, opt.prefix)
        for _, parsed in pairs(commands) do
            local args = {}
            for arg in parsed:gmatch("[^ ]+") do
                table.insert(args, arg)
            end
            cmd.run(args)
        end
    end)
end

local connections = {}

lib.connect = function(name, connection)	-- no :(
    connections[name .. tostring(math.random(1000000, 9999999))] = connection
    return connection
end

lib.disconnect = function(name)
    for title, connection in pairs(connections) do
        if title:find(name) == 1 then
            connection:Disconnect()
        end
    end
end

m = math			-- prepare for annoying and unnecessary tool grip math
rad = m.rad
clamp = m.clamp
sin = m.sin
tan = m.tan
cos = m.cos

--[[ PLAYER FUNCTIONS ]]--
argument = {}
argument.getPlayers = function(str)
    local playerNames, players = lib.parseText(str, opt.tupleSeparator), {}
    for _, arg in pairs(playerNames or {"me"}) do
        arg = arg:lower()
        local playerList = Players:GetPlayers()
        if arg == "me" or arg == nil then
            table.insert(players, localPlayer)
            
        elseif arg == "all" then
            for _, plr in pairs(playerList) do
                table.insert(players, plr)
            end
            
        elseif arg == "others" then
            for _, plr in pairs(playerList) do
                if plr ~= localPlayer then
                    table.insert(players, plr)
                end
            end
            
        elseif arg == "random" then
            table.insert(players, playerList[math.random(1, #playerList)])
            
        elseif arg:find("%%") == 1 then
            local teamName = arg:sub(2)
            for _, plr in pairs(playerList) do
                if tostring(plr.Team):lower():find(teamName) == 1 then
                    table.insert(players, plr)
                end
            end
            
        else
            for _, plr in pairs(playerList) do
                if plr.Name:lower():find(arg) == 1 or (plr.DisplayName and plr.DisplayName:lower():find(arg) == 1) or (tostring(plr.UserId):lower():find(arg) == 1) then
                    table.insert(players, plr)
                end
            end
        end
    end
    return players
end

cmd.add({"prefix"}, {"prefix <prefix>", "Changes the admin prefix"}, function(...)
PrefixChange = (...)

if PrefixChange == nil then
Notify({
Description = "Please enter a valid prefix";
Title = "HKAND Admin";
Duration = 5;

});
elseif PrefixChange == "p" or PrefixChange == "[" or PrefixChange == "P" then
    Notify({
        Description = "idk why but this prefix breaks changing the prefix so pick smthing else alr?";
        Title = "HKAND Admin";
        Duration = 5;
        
        });
    else
opt.prefix = PrefixChange
Notify({
Description = "Prefix set to " .. PrefixChange .. "";
Title = "HKAND Admin";
Duration = 5;

});
end
end)


cmd.add({"saveprefix"}, {"saveprefix <prefix>", "Saves the prefix to what u want"}, function(...)
PrefixChange = (...)

if PrefixChange == nil then
Notify({
Description = "Please enter a valid prefix";
Title = "HKAND Admin";
Duration = 5;

});
elseif PrefixChange == "p" or PrefixChange == "[" or PrefixChange == "P" then
    Notify({
        Description = "idk why but this prefix breaks changing the prefix so pick smthing else alr?";
        Title = "HKAND Admin";
        Duration = 5;
        
        });
    else
writefile("HKAND-Admin\\Prefix.txt", PrefixChange)
opt.prefix = PrefixChange
Notify({
Description = "Prefix saved to '" .. PrefixChange .. "'";
Title = "HKAND Admin";
Duration = 5;

});
end
end)

--[ UTILITY ]--

cmd.add({"chatlogs", "clogs"}, {"chatlogs (clogs)", "Open the chat logs"}, function()
    gui.chatlogs()
end)

cmd.add({"commands", "cmds"}, {"commands (cmds)", "Open the command list"}, function()
    gui.commands()
end)

cmd.add({"commandcount", "cc"}, {"commandcount (cc)", "Counds how many commands NA has"}, function()

Notify({
    Description = "HKAND Admin currently has ".. commandcount .. " commands";
    Title = "HKAND Admin";
    Duration = 5;
    
    });
end)

cmd.add({"rjre", "rejoinrefresh"}, {"rjre (rejoinrefresh)", "Rejoins and teleports you to the position where you were before"}, function()

    queueteleport = (syn and syn.queue_on_teleport) or queue_on_teleport or (fluxus and fluxus.queue_on_teleport)

    
    if not DONE then
      DONE = true
      local qot = print("a")
      local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
      if hrp then
        qot = "task.spawn(function() end) repeat wait() until game and game:IsLoaded() local lp = game:GetService('Players').LocalPlayer local char = lp.Character or lp.CharacterAdded:Wait() repeat char:WaitForChild('HumanoidRootPart').CFrame = CFrame.new("..tostring(hrp.CFrame)..") wait() until (Vector3.new("..tostring(hrp.Position)..") - char:WaitForChild('HumanoidRootPart').Position).Magnitude < 10"
      end
      queueteleport(qot)
      game:GetService("TeleportService"):TeleportCancel()
        game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
    end
        end)

cmd.add({"rejoin", "rj"}, {"rejoin (rj)", "Rejoin the game"}, function()
    game:GetService("TeleportService"):Teleport(game.PlaceId)
    wait()
    


wait();

Notify({
Description = "Rejoining...";
Title = "HKAND Admin";
Duration = 5;

});
end)

wrap(function()
    --i am so not putting an emulator as a command here
end)

--[ LOCALPLAYER ]--
local function respawn()
cf = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
game.Players.LocalPlayer.Character.Humanoid.Health = 0
player.CharacterAdded:wait(1); wait(0.2);
    character:WaitForChild("HumanoidRootPart").CFrame = cf
    end

local function refresh()
cf = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
game.Players.LocalPlayer.Character.Humanoid.Health = 0
player.CharacterAdded:wait(1); wait(0.2);
    character:WaitForChild("HumanoidRootPart").CFrame = cf
end

local abort = 0
local function getTools(amt)
    if not amt then amt = 1 end
    local toolAmount, grabbed = 0, {}
    local lastCF = character.PrimaryPart.CFrame
    local ab = abort
    
    for i, v in pairs(localPlayer:FindFirstChildWhichIsA("Backpack"):GetChildren()) do
        if v:IsA("BackpackItem") then
            toolAmount = toolAmount + 1
        end
    end
    if toolAmount >= amt then return localPlayer:FindFirstChildWhichIsA("Backpack"):GetChildren() end
    if not localPlayer:FindFirstChildWhichIsA("Backpack"):FindFirstChildWhichIsA("BackpackItem") then return end
    
    repeat
        repeat wait() until localPlayer:FindFirstChildWhichIsA("Backpack") or ab ~= abort
        backpack = localPlayer:FindFirstChildWhichIsA("Backpack")
        wrap(function()
            repeat wait() until backpack:FindFirstChildWhichIsA("BackpackItem")
            for _, tool in pairs(backpack:GetChildren()) do
                if #grabbed >= amt or ab ~= abort then break end
                if tool:IsA("BackpackItem") then
                    tool.Parent = localPlayer
                    table.insert(grabbed, tool)
                end
            end
        end)
        
        respawn()
        wait(.1)
    until
        #grabbed >= amt or ab ~= abort
    
    repeat wait() until localPlayer.Character and tostring(localPlayer.Character) ~= "respawn_" and localPlayer.Character == character
    wait(.2)
    
    repeat wait() until localPlayer:FindFirstChildWhichIsA("Backpack") or ab ~= abort
    local backpack = localPlayer:FindFirstChildWhichIsA("Backpack")
    for _, tool in pairs(grabbed) do
        if tool:IsA("BackpackItem") then
            tool.Parent = backpack
        end
    end
    wrap(function()
        repeat wait() until character.PrimaryPart
        wait(.2)
        character:SetPrimaryPartCFrame(lastCF)
    end)
    wait(.2)
    return grabbed
end

cmd.add({"vfly", "vehiclefly"}, {"vehiclefly (vfly)", "be able to fly vehicles"}, function(...)
FLYING = false
    cmdlp.Character.Humanoid.PlatformStand = false
    wait()

        
        
        wait();
        
        Notify({
        Description = "Vehicle fly enabled";
        Title = "HKAND Admin";
        Duration = 5;
    
});
    sFLY(true)
    speedofthevfly = (...)
    if (...) == nil then
        speedofthevfly = 2
        end
end)

cmd.add({"unvfly", "unvehiclefly"}, {"unvehiclefly (unvfly)", "disable vehicle fly"}, function()

        
        
        wait();
        
        Notify({
        Description = "Vehicle fly disabled";
        Title = "HKAND Admin";
        Duration = 5;
    
});
FLYING = false
    cmdlp.Character.Humanoid.PlatformStand = false
end)

cmd.add({"tweento", "tweengoto"}, {"tweengoto (tweento)", "Teleportation method that bypassses some anticheats"}, function(...)
local Username = (...)


char = game.Players.LocalPlayer

TweenService = game:GetService("TweenService")

speaker = game.Players.LocalPlayer
Players = game:GetService("Players")
    
    local players = getPlr(Username)
            TweenService:Create(getRoot(speaker.Character), TweenInfo.new(2, Enum.EasingStyle.Linear), {CFrame = getRoot(players.Character).CFrame + Vector3.new(3,1,0)}):Play()
    
end)

cmd.add({"respawn", "re"}, {"respawn", "Respawn your character"}, function()
    local old = getChar().HumanoidRootPart.CFrame
    respawn()
    wait()
    plr.CharacterAdded:Wait()
    getChar():WaitForChild("HumanoidRootPart").CFrame = old
end)

cmd.add({"antisit"}, {"antisit", "Antisit"}, function()
            Player.Character.Humanoid:SetStateEnabled("Seated", false)
                    Player.Character.Humanoid.Sit = true
                    
                    
                    
                    wait();
                    
                    Notify({
                    Description = "Anti sit enabled";
                    Title = "HKAND Admin";
                    Duration = 5;
                    
});
end)

cmd.add({"unantisit"}, {"unantisit", "Disable antisit command"}, function()
        Player.Character.Humanoid:SetStateEnabled("Seated", true)
                    Player.Character.Humanoid.Sit = false
                    
                    
                    
                    wait();
                    
                    Notify({
                    Description = "Anti sit disabled";
                    Title = "HKAND Admin";
                    Duration = 5;
                    
});
end)

cmd.add({"sit"}, {"sit", "Sit your player"}, function()
    local hum = character:FindFirstChildWhichIsA("Humanoid")
    if hum then
        hum.Sit = true
    end
end)

cmd.add({"spin"}, {"spin", "Spin yourself at the speed you want"}, function(d)
    local spinSpeed = tonumber(d)
    if d and isNumber(d) then
        spinSpeed = (d)
    end
    for i,v in pairs(getRoot(game.Players.LocalPlayer.Character):GetChildren()) do
        if v.Name == "Spinning" then
            v:Destroy()
        end
    end
    local Spin = Instance.new("BodyAngularVelocity")
    Spin.Name = "Spinning"
    Spin.Parent = getRoot(speaker.Character)
    Spin.MaxTorque = Vector3.new(0, math.huge, 0)
    Spin.AngularVelocity = Vector3.new(0,spinSpeed,0)
end)

cmd.add({"reset"}, {"reset", "Makes your health be 0"}, function()
    game.Players.LocalPlayer.Character.Humanoid.Health = 0
end)

cmd.add({"serverhop", "shop"}, {"serverhop (shop)", "Serverhop"}, function()
                wait();

Notify({
Description = "Searching";
Title = "HKAND Admin";
Duration = 5;

});
                local Number = 0
                local SomeSRVS = {}
                for _, v in ipairs(game:GetService("HttpService"):JSONDecode(game:HttpGetAsync("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100")).data) do
                    if type(v) == "table" and v.maxPlayers > v.playing and v.id ~= game.JobId then
                        if v.playing > Number then
                            Number = v.playing
                            SomeSRVS[1] = v.id
                        end
                    end
                end
                if #SomeSRVS > 0 then
                Notify({
Description = "Searched, please wait while we are teleporting you";
Title = "HKAND Admin";
Duration = 5;

});
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, SomeSRVS[1])
                end
end)

local flyPart
cmd.add({"fly"}, {"fly [speed]", "Enable flight"}, function(...)
FLYING = false
    cmdlp.Character.Humanoid.PlatformStand = false
    wait()

        
        
        wait();
        
        Notify({
        Description = "Fly enabled";
        Title = "HKAND Admin";
        Duration = 5;
    
});
    sFLY(true)
    speedofthevfly = (...)
    if (...) == nil then
        speedofthevfly = 2
        end
end)

cmd.add({"unfly"}, {"unfly", "Disable flight"}, function()

        
        
        wait();
        
        Notify({
        Description = "Not flying anymore";
        Title = "HKAND Admin";
        Duration = 5;
    
});
FLYING = false
    cmdlp.Character.Humanoid.PlatformStand = false
end)

cmd.add({"noclip", "nclip", "nc"}, {"noclip", "Disable your player's collision"}, function()
    if connections["noclip"] then lib.disconnect("noclip") return end
    lib.connect("noclip", RunService.Stepped:Connect(function()
        if not character then return end
        for i, v in pairs(character:GetDescendants()) do
            if v:IsA("BasePart") then
                v.CanCollide = false
            end
        end
    end))
end)

cmd.add({"clip", "c"}, {"clip", "Enable your player's collision"}, function()
    lib.disconnect("noclip")
end)

cmd.add({"freecam", "fc", "fcam"}, {"freecam [speed] (fc, fcam)", "Enable free camera"}, function(speed)
    if not speed then speed = 5 end
    if connections["freecam"] then lib.disconnect("freecam") camera.CameraSubject = character 	wrap(function() character.PrimaryPart.Anchored = false end) end
    local dir = {w = false, a = false, s = false, d = false}
    local cf = Instance.new("CFrameValue")
    local camPart = Instance.new("Part")
    camPart.Transparency = 1
    camPart.Anchored = true
    camPart.CFrame = camera.CFrame
    wrap(function()
        character.PrimaryPart.Anchored = true
    end)
    
    lib.connect("freecam", RunService.RenderStepped:Connect(function()
        local primaryPart = camPart
        camera.CameraSubject = primaryPart
        
        local x, y, z = 0, 0, 0
        if dir.w then z = -1 * speed end
        if dir.a then x = -1 * speed end
        if dir.s then z = 1 * speed end
        if dir.d then x = 1 * speed end
        if dir.q then y = 1 * speed end
        if dir.e then y = -1 * speed end
        
        primaryPart.CFrame = CFrame.new(
            primaryPart.CFrame.p,
            (camera.CFrame * CFrame.new(0, 0, -100)).p
        )
        
        local moveDir = CFrame.new(x,y,z)
        cf.Value = cf.Value:lerp(moveDir, 0.2)
        primaryPart.CFrame = primaryPart.CFrame:lerp(primaryPart.CFrame * cf.Value, 0.2)
    end))
    lib.connect("freecam", UserInputService.InputBegan:Connect(function(input, event)
        if event then return end
        local code, codes = input.KeyCode, Enum.KeyCode
        if code == codes.W then
            dir.w = true
        elseif code == codes.A then
            dir.a = true
        elseif code == codes.S then
            dir.s = true
        elseif code == codes.D then
            dir.d = true
        elseif code == codes.Q then
            dir.q = true
        elseif code == codes.E then
            dir.e = true
        elseif code == codes.Space then
            dir.q = true
        end
    end))
    lib.connect("freecam", UserInputService.InputEnded:Connect(function(input, event)
        if event then return end
        local code, codes = input.KeyCode, Enum.KeyCode
        if code == codes.W then
            dir.w = false
        elseif code == codes.A then
            dir.a = false
        elseif code == codes.S then
            dir.s = false
        elseif code == codes.D then
            dir.d = false
        elseif code == codes.Q then
            dir.q = false
        elseif code == codes.E then
            dir.e = false
        elseif code == codes.Space then
            dir.q = false
        end
    end))
end)

cmd.add({"unfreecam", "unfc", "unfcam"}, {"unfreecam (unfc, unfcam)", "Disable free camera"}, function()
    lib.disconnect("freecam")
    camera.CameraSubject = character
    wrap(function()
        character.PrimaryPart.Anchored = false
    end)
end)

cmd.add({"spinfling", "sfling"}, {"spinfling (sfling)", "Fling by spinning"}, function()
    
    function getRoot(char)
        local rootPart = game.Players.LocalPlayer.Character:FindFirstChild('HumanoidRootPart') or game.Players.LocalPlayer.Character:FindFirstChild('Torso') or game.Players.LocalPlayer.Character:FindFirstChild('UpperTorso')
        return rootPart
        end
        
        local Noclipping = nil
        Clip = false
        wait(0.1)
        local function NoclipLoop()
        if Clip == false and game.Players.LocalPlayer.Character ~= nil then
        for _, child in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if child:IsA("BasePart") and child.CanCollide == true and child.Name ~= floatName then
        child.CanCollide = false
        end
        end
        end
        end
        Noclipping = game:GetService("RunService").Stepped:Connect(NoclipLoop)
        
        flinging = false
        for _, child in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if child:IsA("BasePart") then
        child.CustomPhysicalProperties = PhysicalProperties.new(math.huge, 0.3, 0.5)
        end
        end
        wait(.1)
        wait(.1)
        local bambam = Instance.new("BodyAngularVelocity")
        bambam.Name = "0"
        bambam.Parent = getRoot(game.Players.LocalPlayer.Character)
        bambam.AngularVelocity = Vector3.new(0,99999,0)
        bambam.MaxTorque = Vector3.new(0,math.huge,0)
        bambam.P = math.huge
        local Char = game.Players.LocalPlayer.Character:GetChildren()
        for i, v in next, Char do
        if v:IsA("BasePart") then
        v.CanCollide = false
        v.Massless = true
        v.Velocity = Vector3.new(0, 0, 0)
        end
        end
        flinging = true
        local function flingDiedF()
        if flingDied then
        flingDied:Disconnect()
        end
        flinging = false
        wait(.1)
        local speakerChar = game.Players.LocalPlayer.Character
        if not speakerChar or not getRoot(speakerChar) then return end
        for i,v in pairs(getRoot(speakerChar):GetChildren()) do
        if v.ClassName == 'BodyAngularVelocity' then
        v:Destroy()
        end
        end
        for _, child in pairs(speakerChar:GetDescendants()) do
        if child.ClassName == "Part" or child.ClassName == "MeshPart" then
        child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
        end
        end
        flingDied = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').Died:Connect(flingDiedF)
        repeat
        bambam.AngularVelocity = Vector3.new(0,99999,0)
        wait(.2)
        bambam.AngularVelocity = Vector3.new(0,0,0)
        wait(.1)
        until flinging == false
end)

cmd.add({"unspinfling", "unsfling"}, {"unspinfling (unsfling)", "Stop the spinfling command"}, function()
    if Noclipping then
        Noclipping:Disconnect()
        end
        Clip = true
    
    if flingDied then
        flingDied:Disconnect()
        end
        flinging = false
        wait(.1)
        local speakerChar = game.Players.LocalPlayer.Character
        if not speakerChar or not getRoot(speakerChar) then return end
        for i,v in pairs(getRoot(speakerChar):GetChildren()) do
        if v.ClassName == 'BodyAngularVelocity' then
        v:Destroy()
        end
        end
        for _, child in pairs(speakerChar:GetDescendants()) do
        if child.ClassName == "Part" or child.ClassName == "MeshPart" then
        child.CustomPhysicalProperties = PhysicalProperties.new(0.7, 0.3, 0.5)
        end
        end
end)

--[ PLAYER ]--
cmd.add({"orbit"}, {"orbit <player> <distance>", "Orbit around a player"}, function(p,d)
    lib.disconnect("orbit")
    local players = argument.getPlayers(p)
    local target = players[1]
    if not target then return end
    
    local tchar, char = target.Character, character
    local thrp = tchar:FindFirstChild("HumanoidRootPart")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local dist = tonumber(d) or 4
    
    if tchar and char and thrp and hrp then
        local sineX, sineZ = 0, math.pi/2
        lib.connect("orbit", RunService.Stepped:Connect(function()
            sineX, sineZ = sineX + 0.05, sineZ + 0.05
            local sinX, sinZ = math.sin(sineX), math.sin(sineZ)
            if thrp.Parent and hrp.Parent then
                hrp.Velocity = Vector3.new(0, 0, 0)
                hrp.CFrame = CFrame.new(sinX * dist, 0, sinZ * dist) *
                    (hrp.CFrame - hrp.CFrame.p) +
                    thrp.CFrame.p
            end
        end))
    end
end)

cmd.add({"uporbit"}, {"uporbit <player> <distance>", "Orbit around a player on the Y axis"}, function(p,d)
    lib.disconnect("orbit")
    local players = argument.getPlayers(p)
    local target = players[1]
    if not target then return end
    
    local tchar, char = target.Character, character
    local thrp = tchar:FindFirstChild("HumanoidRootPart")
    local hrp = char:FindFirstChild("HumanoidRootPart")
    local dist = tonumber(d) or 4
    
    if tchar and char and thrp and hrp then
        local sineX, sineY = 0, math.pi/2
        lib.connect("orbit", RunService.Stepped:Connect(function()
            sineX, sineY = sineX + 0.05, sineY + 0.05
            local sinX, sinY = math.sin(sineX), math.sin(sineY)
            if thrp.Parent and hrp.Parent then
                hrp.Velocity = Vector3.new(0, 0, 0)
                hrp.CFrame = CFrame.new(sinX * dist, sinY * dist, 0) *
                    (hrp.CFrame - hrp.CFrame.p) +
                    thrp.CFrame.p
            end
        end))
    end
end)

cmd.add({"unorbit"}, {"unorbit", "Stop orbiting a player"}, function()
    lib.disconnect("orbit")
end)

cmd.add({"height", "hipheight", "hh"}, {"height <number> (hipheight, hh)", "Changes your hipheight"}, function(...)
    game.Players.LocalPlayer.Character.Humanoid.HipHeight = (...)
end)

cmd.add({"fling"}, {"fling <player>", "Fling the given player"}, function(plr)
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()
local Targets = {plr}

local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local AllBool = false

local GetPlayer = function(Name)
   Name = Name:lower()
   if Name == "all" or Name == "others" then
       AllBool = true
       return
   elseif Name == "random" then
       local GetPlayers = Players:GetPlayers()
       if table.find(GetPlayers,Player) then table.remove(GetPlayers,table.find(GetPlayers,Player)) end
       return GetPlayers[math.random(#GetPlayers)]
   elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
       for _,x in next, Players:GetPlayers() do
           if x ~= Player then
               if x.Name:lower():match("^"..Name) then
                   return x;
               elseif x.DisplayName:lower():match("^"..Name) then
                   return x;
               end
           end
       end
   else
       return
   end
end

local Message = function(_Title, _Text, Time)
   print(_Title)
   print(_Text)
   print(Time)
end

local SkidFling = function(TargetPlayer)
   local Character = Player.Character
   local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
   local RootPart = Humanoid and Humanoid.RootPart

   local TCharacter = TargetPlayer.Character
   local THumanoid
   local TRootPart
   local THead
   local Accessory
   local Handle

   if TCharacter:FindFirstChildOfClass("Humanoid") then
       THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
   end
   if THumanoid and THumanoid.RootPart then
       TRootPart = THumanoid.RootPart
   end
   if TCharacter:FindFirstChild("Head") then
       THead = TCharacter.Head
   end
   if TCharacter:FindFirstChildOfClass("Accessory") then
       Accessory = TCharacter:FindFirstChildOfClass("Accessory")
   end
   if Accessoy and Accessory:FindFirstChild("Handle") then
       Handle = Accessory.Handle
   end

   if Character and Humanoid and RootPart then
       if RootPart.Velocity.Magnitude < 50 then
           getgenv().OldPos = RootPart.CFrame
       end
       if THumanoid and THumanoid.Sit and not AllBool then
       end
       if THead then
           workspace.CurrentCamera.CameraSubject = THead
       elseif not THead and Handle then
           workspace.CurrentCamera.CameraSubject = Handle
       elseif THumanoid and TRootPart then
           workspace.CurrentCamera.CameraSubject = THumanoid
       end
       if not TCharacter:FindFirstChildWhichIsA("BasePart") then
           return
       end
       
       local FPos = function(BasePart, Pos, Ang)
           RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
           Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
           RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
           RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
       end
       
       local SFBasePart = function(BasePart)
           local TimeToWait = 2
           local Time = tick()
           local Angle = 0

           repeat
               if RootPart and THumanoid then
                   if BasePart.Velocity.Magnitude < 50 then
                       Angle = Angle + 100

                       FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()
                   else
                       FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()
                       
                       FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                       task.wait()
                   end
               else
                   break
               end
           until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
       end
       
       workspace.FallenPartsDestroyHeight = 0/0
       
       local BV = Instance.new("BodyVelocity")
       BV.Name = "EpixVel"
       BV.Parent = RootPart
       BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
       BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
       
       Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
       
       if TRootPart and THead then
           if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
               SFBasePart(THead)
           else
               SFBasePart(TRootPart)
           end
       elseif TRootPart and not THead then
           SFBasePart(TRootPart)
       elseif not TRootPart and THead then
           SFBasePart(THead)
       elseif not TRootPart and not THead and Accessory and Handle then
           SFBasePart(Handle)
       else
       end
       
       BV:Destroy()
       Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
       workspace.CurrentCamera.CameraSubject = Humanoid
       
       repeat
           RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
           Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
           Humanoid:ChangeState("GettingUp")
           table.foreach(Character:GetChildren(), function(_, x)
               if x:IsA("BasePart") then
                   x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
               end
           end)
           task.wait()
       until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
       workspace.FallenPartsDestroyHeight = getgenv().FPDH
   else
   end
end

getgenv().Welcome = true
if Targets[1] then for _,x in next, Targets do GetPlayer(x) end else return end

if AllBool then
   for _,x in next, Players:GetPlayers() do
       SkidFling(x)
   end
end

for _,x in next, Targets do
   if GetPlayer(x) and GetPlayer(x) ~= Player then
       if GetPlayer(x).UserId ~= 1414978355 then
           local TPlayer = GetPlayer(x)
           if TPlayer then
               SkidFling(TPlayer)
           end
       else
       end
   elseif not GetPlayer(x) and not AllBool then
   end
end
end)

cmd.add({"goto", "to", "tp", "teleport"}, {"goto <player/X,Y,Z>", "Teleport to the given player or X,Y,Z coordinates"}, function(...)
    Username = (...)

    local target = getPlr(Username)
    getChar().HumanoidRootPart.CFrame = target.Character.Humanoid.RootPart.CFrame
end)
Stare = false
cmd.add({"lookat", "stare"}, {"stare <player> (lookat)", "Stare at a player"}, function(...)
    Username = (...)
    local Target = getPlr(Username)
    if Staring then
        Staring:Disconnect()
    end
    if not Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") and Target.Character:FindFirstChild("HumanoidRootPart") then return end
    local function Stare()
        if Players.LocalPlayer.Character.PrimaryPart and Players:FindFirstChild(Target.Name) and Target.Character ~= nil and Target.Character:FindFirstChild("HumanoidRootPart") then
            local CharPos = Players.LocalPlayer.Character.PrimaryPart.Position
            local tpos = Target.Character:FindFirstChild("HumanoidRootPart").Position
            local TPos = Vector3.new(tpos.X,CharPos.Y,tpos.Z)
            local NewCFrame = CFrame.new(CharPos,TPos)
            Players.LocalPlayer.Character:SetPrimaryPartCFrame(NewCFrame)
        elseif not Players:FindFirstChild(Target.Name) then
            Staring:Disconnect()
        end
    end

    Staring = game:GetService("RunService").RenderStepped:Connect(Stare)
end)

cmd.add({"unlookat", "unstare"}, {"unstare (unlookat)", "Stops staring"}, function()
    Staring:Disconnect()
end)

cmd.add({"watch", "view", "specate"}, {"view <player>", "Watch the given player"}, function(...)
game.Workspace.CurrentCamera.CameraSubject = character:FindFirstChildWhichIsA("Humanoid")
    view = false
wait(0.3)
    view = true
Username = (...)

local target = getPlr(Username)
repeat wait()
workspace.CurrentCamera.CameraSubject = target.Character.Humanoid
until view == false
end)

cmd.add({"unwatch", "unview", "unspectate"}, {"unview", "Stop watching a player"}, function()
local character = game.Players.LocalPlayer.Character
view = false
wait(0.3)
game.Workspace.CurrentCamera.CameraSubject = character:FindFirstChildWhichIsA("Humanoid")
end)

cmd.add({"exit"}, {"exit", "Close down roblox"}, function()
game:Shutdown()
end)

cmd.add({"loopfling"}, {"loopfling <player>", "Loop voids a player"}, function(plr)
    local Targets = {plr}
    
    Loopvoid = true
    repeat wait()
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local AllBool = false

local GetPlayer = function(Name)
   Name = Name:lower()
   if Name == "all" or Name == "others" then
       AllBool = true
       return
   elseif Name == "random" then
       local GetPlayers = Players:GetPlayers()
       if table.find(GetPlayers,Player) then table.remove(GetPlayers,table.find(GetPlayers,Player)) end
       return GetPlayers[math.random(#GetPlayers)]
   elseif Name ~= "random" and Name ~= "all" and Name ~= "others" then
       for _,x in next, Players:GetPlayers() do
           if x ~= Player then
               if x.Name:lower():match("^"..Name) then
                   return x;
               elseif x.DisplayName:lower():match("^"..Name) then
                   return x;
               end
           end
       end
   else
       return
   end
end

local Message = function(_Title, _Text, Time)

end

local SkidFling = function(TargetPlayer)
   local Character = Player.Character
   local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
   local RootPart = Humanoid and Humanoid.RootPart

   local TCharacter = TargetPlayer.Character
   local THumanoid
   local TRootPart
   local THead
   local Accessory
   local Handle

   if TCharacter:FindFirstChildOfClass("Humanoid") then
       THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
   end
   if THumanoid and THumanoid.RootPart then
       TRootPart = THumanoid.RootPart
   end
   if TCharacter:FindFirstChild("Head") then
       THead = TCharacter.Head
   end
   if TCharacter:FindFirstChildOfClass("Accessory") then
       Accessory = TCharacter:FindFirstChildOfClass("Accessory")
   end
   if Accessoy and Accessory:FindFirstChild("Handle") then
       Handle = Accessory.Handle
   end

   if Character and Humanoid and RootPart then
       if RootPart.Velocity.Magnitude < 50 then
           getgenv().OldPos = RootPart.CFrame
       end
       if THumanoid and THumanoid.Sit and not AllBool then
           return Message("Error Occurred", "Targeting is sitting", 5) -- u can remove dis part if u want lol
       end
       if THead then
           workspace.CurrentCamera.CameraSubject = THead
       elseif not THead and Handle then
           workspace.CurrentCamera.CameraSubject = Handle
       elseif THumanoid and TRootPart then
           workspace.CurrentCamera.CameraSubject = THumanoid
       end
       if not TCharacter:FindFirstChildWhichIsA("BasePart") then
           return
       end
       
       local FPos = function(BasePart, Pos, Ang)
           RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
           Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
           RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
           RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
       end
       
       local SFBasePart = function(BasePart)
           local TimeToWait = 2
           local Time = tick()
           local Angle = 0

           repeat
               if RootPart and THumanoid then
                   if BasePart.Velocity.Magnitude < 50 then
                       Angle = Angle + 100

                       FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                       task.wait()
                   else
                       FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()
                       
                       FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                       task.wait()

                       FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                       task.wait()
                   end
               else
                   break
               end
           until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
       end
       
       workspace.FallenPartsDestroyHeight = 0/0
       
       local BV = Instance.new("BodyVelocity")
       BV.Name = "EpixVel"
       BV.Parent = RootPart
       BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
       BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
       
       Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
       
       if TRootPart and THead then
           if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
               SFBasePart(THead)
           else
               SFBasePart(TRootPart)
           end
       elseif TRootPart and not THead then
           SFBasePart(TRootPart)
       elseif not TRootPart and THead then
           SFBasePart(THead)
       elseif not TRootPart and not THead and Accessory and Handle then
           SFBasePart(Handle)
       else
           return Message("Error Occurred", "Target is missing everything", 5)
       end
       
       BV:Destroy()
       Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
       workspace.CurrentCamera.CameraSubject = Humanoid
       
       repeat
           RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
           Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
           Humanoid:ChangeState("GettingUp")
           table.foreach(Character:GetChildren(), function(_, x)
               if x:IsA("BasePart") then
                   x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
               end
           end)
           task.wait()
       until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
       workspace.FallenPartsDestroyHeight = getgenv().FPDH
   else
       return Message("Error Occurred", "Random error", 5)
   end
end

if not Welcome then Message("Script by AnthonyIsntHere", "Enjoy!", 5) end
getgenv().Welcome = true
if Targets[1] then for _,x in next, Targets do GetPlayer(x) end else return end

if AllBool then
   for _,x in next, Players:GetPlayers() do
       SkidFling(x)
   end
end

for _,x in next, Targets do
   if GetPlayer(x) and GetPlayer(x) ~= Player then
       if GetPlayer(x).UserId ~= 1414978355 then
           local TPlayer = GetPlayer(x)
           if TPlayer then
               SkidFling(TPlayer)
           end
       else
           Message("Error Occurred", "This user is whitelisted! (Owner)", 5)
       end
   elseif not GetPlayer(x) and not AllBool then
       Message("Error Occurred", "Username Invalid", 5)
   end
end
    until Loopvoid == false
end)

loopwave = false
cmd.add({"loopwaveat", "loopwat"}, {"loopwaveat <player> (loopwat)", "Wave to a player in a loop"}, function(...)
   loopwave = true
   Player = (...)
   Target = getPlr(Player)
   local oldcframe = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
   repeat wait()
       wait(0.2)
       targetcframe = Target.Character.HumanoidRootPart.CFrame
   WaveAnim = Instance.new("Animation")
               if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                   WaveAnim.AnimationId = "rbxassetid://507770239"
               else
                   WaveAnim.AnimationId = "rbxassetid://128777973"
               end
               game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetcframe * CFrame.new(0, 0, -3)
               local CharPos = game.Players.LocalPlayer.Character.PrimaryPart.Position
                       local tpos = Target.Character:FindFirstChild("HumanoidRootPart").Position
                       local TPos = Vector3.new(tpos.X,CharPos.Y,tpos.Z)
                       local NewCFrame = CFrame.new(CharPos,TPos)
                       Players.LocalPlayer.Character:SetPrimaryPartCFrame(NewCFrame)
   wave = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(WaveAnim)
   wave:Play(-1, 5, -1)
   wait(1.6)
   wave:Stop()
           until loopwave == false
   game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldcframe
end)

cmd.add({"unloopwaveat", "unloopwat"}, {"unloopwaveat <player> (unloopwat)", "Stops the loopwaveat command"}, function(...)
   loopwave = false
end)

cmd.add({"waveat", "wat"}, {"waveat <player> (wat)", "Wave to a player"}, function(...)
-- r6 / 128777973
-- r15 / 507770239
Player = (...)
Target = getPlr(Player)
local oldcframe = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
targetcframe = Target.Character.HumanoidRootPart.CFrame
WaveAnim = Instance.new("Animation")
            if game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').RigType == Enum.HumanoidRigType.R15 then
                WaveAnim.AnimationId = "rbxassetid://507770239"
            else
                WaveAnim.AnimationId = "rbxassetid://128777973"
            end
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetcframe * CFrame.new(0, 0, -3)
            local CharPos = game.Players.LocalPlayer.Character.PrimaryPart.Position
                    local tpos = Target.Character:FindFirstChild("HumanoidRootPart").Position
                    local TPos = Vector3.new(tpos.X,CharPos.Y,tpos.Z)
                    local NewCFrame = CFrame.new(CharPos,TPos)
                    Players.LocalPlayer.Character:SetPrimaryPartCFrame(NewCFrame)
wave = game.Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):LoadAnimation(WaveAnim)
wave:Play(-1, 5, -1)
wait(1.6)
wave:Stop()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = oldcframe
end)

    cmd.add({"unloopfling"}, {"unloopfling", "Stops loop flinging a player"}, function(...)
Loopvoid = false
    end)

cmd.add({"spin"}, {"spin {amount}", "Makes your character spin as fast as you want"}, function(...)
    
    
    
    wait();
    
    Notify({
    Description = "Spinning...";
    Title = "HKAND Admin";
    Duration = 5;
    
});
    function getRoot(char)
        local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
        return rootPart
    end
    
    local spinSpeed = (...)
        for i,v in pairs(getRoot(game.Players.LocalPlayer.Character):GetChildren()) do
            if v.Name == "Spinning" then
                v:Destroy()
            end
        end
        local Spin = Instance.new("BodyAngularVelocity")
        Spin.Name = "Spinning"
        Spin.Parent = getRoot(game.Players.LocalPlayer.Character)
        Spin.MaxTorque = Vector3.new(0, math.huge, 0)
        Spin.AngularVelocity = Vector3.new(0,spinSpeed,0)
end)

cmd.add({"unspin"}, {"unspin", "Makes your character unspin"}, function()
    


wait();

Notify({
Description = "Spin disabled";
Title = "HKAND Admin";
Duration = 5;

});
    function getRoot(char)
        local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
        return rootPart
    end
    
    for i,v in pairs(getRoot(game.Players.LocalPlayer.Character):GetChildren()) do
            if v.Name == "Spinning" then
                v:Destroy()
            end
        end
end)

cmd.add({"xray", "xrayon"}, {"xray (xrayon)", "Makes you be able to see through walls"}, function()
    
    
    
    wait();
    
    Notify({
    Description = "Xray enabled";
    Title = "HKAND Admin";
    Duration = 5;
    
});
transparent = true
    x(transparent)
end)

cmd.add({"unxray", "xrayoff"}, {"unxray (xrayoff)", "Makes you not be able to see through walls"}, function()
    
    
    
    wait();
    
    Notify({
    Description = "Xray disabled";
    Title = "HKAND Admin";
    Duration = 5;
    
});
transparent = false
    x(transparent)
end)

cmd.add({"iy", "i"}, {"iy {command} (i)", "Executes infinite yield scripts"}, function(...)
    if IYLOADED == false then
        local function copytable(tbl) local copy = {} for i,v in pairs(tbl) do copy[i] = v end return copy end
        local sandbox_env = copytable(getfenv())
        setmetatable(sandbox_env, {
        __index = function(self, i)
            if rawget(sandbox_env, i) then
                return rawget(sandbox_env, i)
            elseif getfenv()[i] then
                return getfenv()[i]
            end
        end
        })
        sandbox_env.game = nil
        iy, _ = game:HttpGet("https://gitlab.com/Dypasser/DRepos/-/raw/main/IY"):gsub("local Main", "Main"):gsub("Players.LocalPlayer.Chatted","Funny = Players.LocalPlayer.Chatted"):gsub("local lastMessage","notify = _G.notify\nlocal lastMessage")
        setfenv(loadstring(iy),sandbox_env)()
        iy_cmds_table = sandbox_env.CMDs
        iy_gui = sandbox_env.Main
        iy_chathandler = sandbox_env.Funny
        execCmd = sandbox_env.execCmd
        iy_gui:Destroy()
        pcall(function()
            iy_chathandler:Disconnect()
        end)
        IYLOADED = true
    end
    execCmd((...))
    end)

cmd.add({"invisible"}, {"invisible", "Sets invisibility to scare people or something"}, function()
    Keybind = "E"

    local CS = game:GetService("CollectionService")
    local UIS = game:GetService("UserInputService")
    
    if invisRunning then return end
        invisRunning = true
        -- Full credit to AmokahFox @V3rmillion
        local Player = game.Players.LocalPlayer
        repeat wait(.1) until game.Players.LocalPlayer.Character
        local Character = game.Players.LocalPlayer.Character
        Character.Archivable = true
        local IsInvis = false
        local IsRunning = true
        local InvisibleCharacter = Character:Clone()
        InvisibleCharacter.Parent = game.Lighting
        local Void = workspace.FallenPartsDestroyHeight
        InvisibleCharacter.Name = ""
        local CF
    
        local invisFix = game:GetService("RunService").Stepped:Connect(function()
            pcall(function()
                local IsInteger
                if tostring(Void):find'-' then
                    IsInteger = true
                else
                    IsInteger = false
                end
                local Pos = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
                local Pos_String = tostring(Pos)
                local Pos_Seperate = Pos_String:split(', ')
                local X = tonumber(Pos_Seperate[1])
                local Y = tonumber(Pos_Seperate[2])
                local Z = tonumber(Pos_Seperate[3])
                if IsInteger == true then
                    if Y <= Void then
                        Respawn()
                    end
                elseif IsInteger == false then
                    if Y >= Void then
                        Respawn()
                    end
                end
            end)
        end)
    
        for i,v in pairs(InvisibleCharacter:GetDescendants())do
            if v:IsA("BasePart") then
                if v.Name == "HumanoidRootPart" then
                    v.Transparency = 1
                else
                    v.Transparency = .5
                end
            end
        end
    
        function Respawn()
            IsRunning = false
            if IsInvis == true then
                pcall(function()
                    Player.Character = Character
                    wait()
                    Character.Parent = workspace
                    Character:FindFirstChildWhichIsA'Humanoid':Destroy()
                    IsInvis = false
                    InvisibleCharacter.Parent = nil
                    invisRunning = false
                end)
            elseif IsInvis == false then
                pcall(function()
                    Player.Character = Character
                    wait()
                    Character.Parent = workspace
                    Character:FindFirstChildWhichIsA'Humanoid':Destroy()
                    TurnVisible()
                end)
            end
        end
    
        local invisDied
        invisDied = InvisibleCharacter:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
            Respawn()
            invisDied:Disconnect()
            end)
            
        function TurnVisible()
            if IsInvis == false then return end
            invisFix:Disconnect()
            invisDied:Disconnect()
            CF = workspace.CurrentCamera.CFrame
            Character = Character
            local CF_1 = Player.Character.HumanoidRootPart.CFrame
            Character.HumanoidRootPart.CFrame = CF_1
            InvisibleCharacter.Parent = game.Lighting
            Player.Character = Character
            Character.Parent = workspace
            IsInvis = false
            Player.Character.Animate.Disabled = true
            Player.Character.Animate.Disabled = false
            invisDied = Character:FindFirstChildOfClass'Humanoid'.Died:Connect(function()
                Respawn()
                invisDied:Disconnect()
            end)
            invisRunning = false
            end
    
            
    
    local CS = game:GetService("CollectionService")
    local UIS = game:GetService("UserInputService")
    
    UIS.InputBegan:Connect(function(input, gameProcessed)
        if input.UserInputType == Enum.UserInputType.Keyboard then
            if input.KeyCode == Enum.KeyCode.E and not gameProcessed then
          if IsInvis == false then
              IsInvis = true
        CF = game.Workspace.CurrentCamera.CFrame
        local CF_1 = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        Character:MoveTo(Vector3.new(0,math.pi*1000000,0))
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
        wait(.1)
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
        InvisibleCharacter = InvisibleCharacter
        Character.Parent = game.Lighting
        InvisibleCharacter.Parent = game.Workspace
        InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
        game.Players.LocalPlayer.Character = InvisibleCharacter
        local workspace = game.Workspace
    Players = game:GetService("Players")
    local speaker = game.Players.LocalPlayer
    workspace.CurrentCamera:remove()
        wait(.1)
        game.Workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
        game.Workspace.CurrentCamera.CameraType = "Custom"
        game.Players.LocalPlayer.CameraMinZoomDistance = 0.5
        game.Players.LocalPlayer.CameraMaxZoomDistance = 400
        game.Players.LocalPlayer.CameraMode = "Classic"
        game.Players.LocalPlayer.Character.Head.Anchored = false
        game.Players.LocalPlayer.Character.Animate.Disabled = true
        game.Players.LocalPlayer.Character.Animate.Disabled = false
    elseif IsInvis == true then
    TurnVisible()
    IsInvis = false
    end
       end
       end
                end)
                
                wait();

Notify({
Description = "Invisible loaded, press " .. Keybind .. " to toggle";
Title = "HKAND Admin";
Duration = 10;

});

if table.find({Enum.Platform.IOS, Enum.Platform.Android}, game:GetService("UserInputService"):GetPlatform()) then 
    wait();
    
    Notify({
    Description = "HKAND Admin has detected you using mobile you now have a invisible button click it to enable / disable invisibility";
    Title = "HKAND Admin";
    Duration = 7;
    });
    

local ScreenGui = Instance.new("ScreenGui")
local TextButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")
local UIAspectRatioConstraint = Instance.new("UIAspectRatioConstraint")

--Properties:

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = false

TextButton.Parent = ScreenGui
TextButton.BackgroundColor3 = Color3.fromRGB(12, 4, 20)
TextButton.BackgroundTransparency = 0.140
TextButton.Position = UDim2.new(0.933, 0,0.621, 0)
TextButton.Size = UDim2.new(0.043, 0,0.083, 0)
TextButton.Font = Enum.Font.SourceSansBold
TextButton.Text = "Become Invisible"
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextSize = 15.000
TextButton.TextWrapped = true
TextButton.Active = true
TextButton.Draggable = true
TextScaled = true

UICorner.Parent = TextButton

UIAspectRatioConstraint.Parent = TextButton
UIAspectRatioConstraint.AspectRatio = 1.060

-- Scripts:

local function FEPVI_fake_script() -- TextButton.LocalScript 
    local script = Instance.new('LocalScript', TextButton)

    IsInvis = false
    script.Parent.MouseButton1Click:Connect(function()
  if IsInvis == false then
              IsInvis = true
        CF = game.Workspace.CurrentCamera.CFrame
        local CF_1 = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
        Character:MoveTo(Vector3.new(0,math.pi*1000000,0))
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Scriptable
        wait(.1)
        game.Workspace.CurrentCamera.CameraType = Enum.CameraType.Custom
        InvisibleCharacter = InvisibleCharacter
        Character.Parent = game.Lighting
        InvisibleCharacter.Parent = game.Workspace
        InvisibleCharacter.HumanoidRootPart.CFrame = CF_1
        Player.Character = InvisibleCharacter
        local workspace = game.Workspace
    Players = game:GetService("Players")
    local speaker = game.Players.LocalPlayer
    workspace.CurrentCamera:remove()
        wait(.1)
        game.Workspace.CurrentCamera.CameraSubject = speaker.Character:FindFirstChildWhichIsA('Humanoid')
        game.Workspace.CurrentCamera.CameraType = "Custom"
        game.Players.LocalPlayer.CameraMinZoomDistance = 0.5
        game.Players.LocalPlayer.CameraMaxZoomDistance = 400
        game.Players.LocalPlayer.CameraMode = "Classic"
        game.Players.LocalPlayer.Character.Head.Anchored = false
        game.Players.LocalPlayer.Character.Animate.Disabled = true
        game.Players.LocalPlayer.Character.Animate.Disabled = false
                    script.Parent.Text = "Become Visible"
    elseif IsInvis == true then
    TurnVisible()
    IsInvis = false
                script.Parent.Text = "Become Invisible"
        end
    end)
end
coroutine.wrap(FEPVI_fake_script)()
else
end
end)

--[[ FUNCTIONALITY ]]--
localPlayer.Chatted:Connect(function(str)
    lib.parseCommand(str)
end)

-- [[ Admin Player]]
function AdminChatted(Message, Player)
    Player.Chatted:Connect(function(Message, Player)
        lib.parseCommand(Message, Player)
    end)
end

function CheckPermissions(Player)
    Player.Chatted:Connect(function(Message)
        if Admin[Player.UserId] then
            AdminChatted(Message, Player)
        end
    end)
end
Players.PlayerAdded:Connect(function(Player)
    CheckPermissions(Player)
end)
for i,v in pairs(Players:GetPlayers()) do
    if v ~= LocalPlayer then
        CheckPermissions(v)
    end
end


--[[ GUI VARIABLES ]]--
local ScreenGui
if not RunService:IsStudio() then
    ScreenGui = game:GetObjects("rbxassetid://13510552309")[1]
else
    repeat wait() until player:FindFirstChild("AdminUI", true)
    ScreenGui = player:FindFirstChild("AdminUI", true)
end

local description = ScreenGui.Description
local cmdBar = ScreenGui.CmdBar
    local centerBar = cmdBar.CenterBar
        local cmdInput = centerBar.Input
    local cmdAutofill = cmdBar.Autofill
        local cmdExample = cmdAutofill.Cmd
    local leftFill = cmdBar.LeftFill
    local rightFill = cmdBar.RightFill
local chatLogsFrame = ScreenGui.ChatLogs
    local chatLogs = chatLogsFrame.Container.Logs
        local chatExample = chatLogs.TextLabel
local commandsFrame = ScreenGui.Commands
    local commandsFilter = commandsFrame.Container.Filter
    local commandsList = commandsFrame.Container.List
        local commandExample = commandsList.TextLabel
local resizeFrame = ScreenGui.Resizeable
local resizeXY = {
    Top		= {Vector2.new(0, -1),	Vector2.new(0, -1),	"rbxassetid://2911850935"},
    Bottom	= {Vector2.new(0, 1),	Vector2.new(0, 0),	"rbxassetid://2911850935"},
    Left	= {Vector2.new(-1, 0),	Vector2.new(1, 0),	"rbxassetid://2911851464"},
    Right	= {Vector2.new(1, 0),	Vector2.new(0, 0),	"rbxassetid://2911851464"},
    
    TopLeft		= {Vector2.new(-1, -1),	Vector2.new(1, -1),	"rbxassetid://2911852219"},
    TopRight	= {Vector2.new(1, -1),	Vector2.new(0, -1),	"rbxassetid://2911851859"},
    BottomLeft	= {Vector2.new(-1, 1),	Vector2.new(1, 0),	"rbxassetid://2911851859"},
    BottomRight	= {Vector2.new(1, 1),	Vector2.new(0, 0),	"rbxassetid://2911852219"},
}

cmdExample.Parent = nil
chatExample.Parent = nil
commandExample.Parent = nil
resizeFrame.Parent = nil

local rPlayer = Players:FindFirstChildWhichIsA("Player")
local coreGuiProtection = {}

pcall(function()
    for i, v in pairs(ScreenGui:GetDescendants()) do
        coreGuiProtection[v] = rPlayer.Name
    end
    ScreenGui.DescendantAdded:Connect(function(v)
        coreGuiProtection[v] = rPlayer.Name
    end)
    coreGuiProtection[ScreenGui] = rPlayer.Name
     
    local meta = getrawmetatable(game)
    local tostr = meta.__tostring
    setreadonly(meta, false)
    meta.__tostring = newcclosure(function(t)
        if coreGuiProtection[t] and not checkcaller() then
            return coreGuiProtection[t]
        end
        return tostr(t)
    end)
end)

if not RunService:IsStudio() then
    local newGui = game:GetService("CoreGui"):FindFirstChildWhichIsA("ScreenGui")
    newGui.DescendantAdded:Connect(function(v)
        coreGuiProtection[v] = rPlayer.Name
    end)
    for i, v in pairs(ScreenGui:GetChildren()) do
        v.Parent = newGui
    end
    ScreenGui = newGui
end

--[[ GUI FUNCTIONS ]]--
gui = {}
gui.txtSize = function(ui, x, y)
    local textService = game:GetService("TextService")
    return textService:GetTextSize(ui.Text, ui.TextSize, ui.Font, Vector2.new(x, y))
end
gui.commands = function()
    if not commandsFrame.Visible then
        commandsFrame.Visible = true
        commandsList.CanvasSize = UDim2.new(0, 0, 0, 0)
    end
    for i, v in pairs(commandsList:GetChildren()) do
        if v:IsA("TextLabel") then
            Destroy(v)
        end
    end
    local i = 0
    for cmdName, tbl in pairs(Commands) do
        local Cmd = commandExample:Clone()
        Cmd.Parent = commandsList
        Cmd.Name = cmdName
        Cmd.Text = " " .. tbl[2][1]
        Cmd.MouseEnter:Connect(function()
            description.Visible = true
            description.Text = tbl[2][2]
        end)
        Cmd.MouseLeave:Connect(function()
            if description.Text == tbl[2][2] then
                description.Visible = false
                description.Text = ""
            end
        end)
        i = i + 1
    end
    commandsList.CanvasSize = UDim2.new(0, 0, 0, i*20+10)
    commandsFrame.Position = UDim2.new(0.5, -283/2, 0.5, -260/2)
end
gui.chatlogs = function()
    if not chatLogsFrame.Visible then
        chatLogsFrame.Visible = true
    end
    chatLogsFrame.Position = UDim2.new(0.5, -283/2+5, 0.5, -260/2+5)
end

gui.tween = function(obj, style, direction, duration, goal)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle[style], Enum.EasingDirection[direction])
    local tween = TweenService:Create(obj, tweenInfo, goal)
    tween:Play()
    return tween
end
gui.mouseIn = function(guiObject, range)
    local pos1, pos2 = guiObject.AbsolutePosition, guiObject.AbsolutePosition + guiObject.AbsoluteSize
    local mX, mY = mouse.X, mouse.Y
    if mX > pos1.X-range and mX < pos2.X+range and mY > pos1.Y-range and mY < pos2.Y+range then
        return true
    end
    return false
end
gui.resizeable = function(ui, min, max)
    local rgui = resizeFrame:Clone()
    rgui.Parent = ui
    
    local mode
    local UIPos
    local lastSize
    local lastPos = Vector2.new()
    
    local function update(delta)
        local xy = resizeXY[(mode and mode.Name) or '']
        if not mode or not xy then return end
        local delta = (delta * xy[1]) or Vector2.new()
        local newSize = Vector2.new(lastSize.X + delta.X, lastSize.Y + delta.Y)
        newSize = Vector2.new(
            math.clamp(newSize.X, min.X, max.X),
            math.clamp(newSize.Y, min.Y, max.Y)
        )
        ui.Size = UDim2.new(0, newSize.X, 0, newSize.Y)
        ui.Position = UDim2.new(
            UIPos.X.Scale, 
            UIPos.X.Offset + (-(newSize.X - lastSize.X) * xy[2]).X, 
            UIPos.Y.Scale, 
            UIPos.Y.Offset + (delta * xy[2]).Y
        )
    end
    
    mouse.Move:Connect(function()
        update(Vector2.new(mouse.X, mouse.Y) - lastPos)
    end)
    
    for _, button in pairs(rgui:GetChildren()) do
        local isIn = false
        button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                mode = button
                lastPos = Vector2.new(mouse.X, mouse.Y)
                lastSize = ui.AbsoluteSize
                UIPos = ui.Position
            end
        end)
        button.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                mode = nil
            end
        end)
        button.MouseEnter:Connect(function()
            mouse.Icon = resizeXY[button.Name][3]
        end)
        button.MouseLeave:Connect(function()
            if mouse.Icon == resizeXY[button.Name][3] then
                mouse.Icon = ""
            end
        end)
    end
end
gui.draggable = function(ui, dragui)
    if not dragui then dragui = ui end
    local UserInputService = game:GetService("UserInputService")
    
    local dragging
    local dragInput
    local dragStart
    local startPos
    
    local function update(input)
        local delta = input.Position - dragStart
        ui.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
    
    dragui.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = ui.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    dragui.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)
end
gui.menuify = function(menu)
    local exit = menu:FindFirstChild("Exit", true)
    local mini = menu:FindFirstChild("Minimize", true)
    local minimized = false
    local sizeX, sizeY = Instance.new("IntValue", menu), Instance.new("IntValue", menu)
    mini.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            sizeX.Value = menu.Size.X.Offset
            sizeY.Value = menu.Size.Y.Offset
            gui.tween(menu, "Quart", "Out", 0.5, {Size = UDim2.new(0, 283, 0, 25)})
        else
            gui.tween(menu, "Quart", "Out", 0.5, {Size = UDim2.new(0, sizeX.Value, 0, sizeY.Value)})
        end
    end)
    exit.MouseButton1Click:Connect(function()
        menu.Visible = false
    end)
    gui.draggable(menu, menu.Topbar)
    menu.Visible = false
end


gui.loadCommands = function()
   for i, v in pairs(cmdAutofill:GetChildren()) do
       if v.Name ~= "UIListLayout" then
           Destroy(v)
       end
   end
   local last = nil
   local i = 0
   for name, tbl in pairs(Commands) do
       local info = tbl[2]
       local btn = cmdExample:Clone()
       btn.Parent = cmdAutofill
       btn.Name = name
       btn.Input.Text = info[1]
       i = i + 1
       
       local size = btn.Size
       btn.Size = UDim2.new(0, 0, 0, 25)
       btn.Size = size
   end
end

    gui.loadCommands()
 for i, v in ipairs(cmdAutofill:GetChildren()) do
        if v:IsA("Frame") then
            v.Visible = false
        end
    end
gui.barSelect = function(speed)
    centerBar.Visible = true
    gui.tween(centerBar, "Sine", "Out", speed or 0.25, {Size = UDim2.new(0, 250, 1, 15)})
    gui.tween(leftFill, "Quad", "Out", speed or 0.3, {Position = UDim2.new(0, 0, 0.5, 0)})
    gui.tween(rightFill, "Quad", "Out", speed or 0.3, {Position = UDim2.new(1, 0, 0.5, 0)})
end
gui.barDeselect = function(speed)
    gui.tween(centerBar, "Sine", "Out", speed or 0.25, {Size = UDim2.new(0, 250, 0, 0)})
    gui.tween(leftFill, "Sine", "In", speed or 0.3, {Position = UDim2.new(-0.5, 100, 0.5, 0)})
    gui.tween(rightFill, "Sine", "In", speed or 0.3, {Position = UDim2.new(1.5, -100, 0.5, 0)})
    for i, v in ipairs(cmdAutofill:GetChildren()) do
        if v:IsA("Frame") then
            wrap(function()
                wait(math.random(1, 200)/2000)
                gui.tween(v, "Back", "In", 0.35, {Size = UDim2.new(0, 0, 0, 25)})
            end)
        end
   end
end

-- [[ AUTOFILL SEARCHER ]] --
gui.searchCommands = function()
   local str = (cmdInput.Text:gsub(";", "")):lower()
   local index = 0
   local lastFrame
   for _, v in ipairs(cmdAutofill:GetChildren()) do
       if v:IsA("Frame") and index < 5 then
           local cmd = Commands[v.Name]
           local name = cmd and cmd[2][1] or ""
           v.Input.Text = str ~= "" and v.Name:find(str) == 1 and v.Name or name
           v.Visible = str == "" or v.Name:find(str)
           if v.Visible then
               index = index + 1
               local n = math.sqrt(index) * 125
               local yPos = (index - 1) * 28
               local newPos = UDim2.new(0.5, 0, 0, yPos)
               gui.tween(v, "Quint", "Out", 0.3, {
                   Size = UDim2.new(0.5, n, 0, 25),
                   Position = lastFrame and newPos or UDim2.new(0.5, 0, 0, yPos),
               })
               lastFrame = v
           end
       end
   end
end

--[[ GUI FUNCTIONALITY ]]--

-- [[ OPEN THE COMMAND BAR ]] -- 
mouse.KeyDown:Connect(function(k)
    if k:lower() == opt.prefix then
        gui.barSelect()
        cmdInput.Text = ''
        cmdInput:CaptureFocus()
                wait(0.00005)
                            cmdInput.Text = ''
    end
end)

-- [[ CLOSE THE COMMAND BAR ]] -- 
cmdInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        wrap(function()
            lib.parseCommand(opt.prefix .. cmdInput.Text)
        end)
    end
    gui.barDeselect()
    end)

cmdInput.Changed:Connect(function(p)
    if p ~= "Text" then return end
    gui.searchCommands()
end)

gui.barDeselect(0)
cmdBar.Visible = true
gui.menuify(chatLogsFrame)
gui.menuify(commandsFrame)

-- [[ GUI RESIZE FUNCTION ]] -- 

-- table.find({Enum.Platform.IOS, Enum.Platform.Android}, game:GetService("UserInputService"):GetPlatform()) | searches if the player is on mobile.
if table.find({Enum.Platform.IOS, Enum.Platform.Android}, game:GetService("UserInputService"):GetPlatform()) then 
else
gui.resizeable(chatLogsFrame, Vector2.new(173,58), Vector2.new(1000,1000))
gui.resizeable(commandsFrame, Vector2.new(184,84), Vector2.new(1000,1000))
end

-- [[ CMDS COMMANDS SEARCH FUNCTION ]] --
commandsFilter.Changed:Connect(function(p)
    if p ~= "Text" then return end
    for i, v in pairs(commandsList:GetChildren()) do
        if v:IsA("TextLabel") then
            if v.Name:find(commandsFilter.Text:lower()) and v.Name:find(commandsFilter.Text:lower()) <= 2 then
                v.Visible = true
            else
                v.Visible = false
            end
        end
    end
end)

-- [[ CHAT TO USE COMMANDS ]] --
local function bindToChat(plr, msg)
    local chatMsg = chatExample:Clone()
    for i, v in pairs(chatLogs:GetChildren()) do
        if v:IsA("TextLabel") then
            v.LayoutOrder = v.LayoutOrder + 1
        end
    end
    chatMsg.Parent = chatLogs
    chatMsg.Text = ("[%s]: %s"):format(plr.Name, msg)
    
    local txtSize = gui.txtSize(chatMsg, chatMsg.AbsoluteSize.X, 100)
    chatMsg.Size = UDim2.new(1, -5, 0, txtSize.Y)
end

for i, plr in pairs(Players:GetPlayers()) do
    plr.Chatted:Connect(function(msg)
        bindToChat(plr, msg)
    end)
end
Players.PlayerAdded:Connect(function(plr)
    plr.Chatted:Connect(function(msg)
        bindToChat(plr, msg)
    end)
end)

mouse.Move:Connect(function()
    description.Position = UDim2.new(0, mouse.X, 0, mouse.Y)
    local size = gui.txtSize(description, 200, 100)
    description.Size = UDim2.new(0, size.X, 0, size.Y)
end)

RunService.Stepped:Connect(function()
    chatLogs.CanvasSize = UDim2.new(0, 0, 0, chatLogs.UIListLayout.AbsoluteContentSize.Y)
    commandsList.CanvasSize = UDim2.new(0, 0, 0, commandsList.UIListLayout.AbsoluteContentSize.Y)
end)

-- never used this lol
function Destroy(guiObject)
    if not pcall(function()guiObject.Parent = game:GetService("CoreGui")end) then
        guiObject.Parent = nil
    end
end

wait(0.2)

-- [[ COMMAND BAR BUTTON ]] --
local ScreenGui = Instance.new("ScreenGui")
local TextClickButton = Instance.new("TextButton")
local UICorner = Instance.new("UICorner")

ScreenGui.Parent = game.CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ScreenGui.ResetOnSpawn = true

TextClickButton.Name = "HKANDAdminButton"
TextClickButton.Parent = ScreenGui
TextClickButton.BackgroundColor3 = Color3.fromRGB(4, 4, 4)
TextClickButton.BackgroundTransparency = 1.000
TextClickButton.Position = UDim2.new(0.418, 0,0, 0)
TextClickButton.Size = UDim2.new(0, 2, 0, 33)
TextClickButton.Font = Enum.Font.SourceSansBold
TextClickButton.Text = "HKAND Admin " .. currentversion .. ""
TextClickButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextClickButton.TextSize = 20.000
TextClickButton.TextScaled = true
TextClickButton.TextWrapped = true

UICorner.CornerRadius = UDim.new(1, 0)
UICorner.Parent = TextClickButton

local function PZORYLB_fake_script() -- TextClickButton.LocalScript 
    local script = Instance.new('LocalScript', TextClickButton)
    textclickbutton = script.Parent
    textclickbutton.Size = UDim2.new(0, 2,0, 33)
    textclickbutton.BackgroundTransparency = 0.14
    textclickbutton:TweenSize(UDim2.new(0, 251,0, 33), "Out", "Quint",1,true)
    wait(2)
    textclickbutton:TweenSize(UDim2.new(0, 32, 0, 33), "Out", "Quint",1,true)
    textclickbutton:TweenPosition(UDim2.new(0.48909232, 0, 0, 0), "Out", "Quint",1,true)
    wait(0.4)
    textclickbutton.Text = "HKAND"
    textclickbutton.Active = true
gui.draggable(textclickbutton)
end
coroutine.wrap(PZORYLB_fake_script)()

TextClickButton.MouseButton1Click:Connect(function()
    gui.barSelect()
        cmdInput.Text = ''
        cmdInput:CaptureFocus()
end)